// +build debug
// Code generated by go-bindata.
// sources:
// ../dist/legacy-assets/css/florence.css
// ../dist/legacy-assets/css/main.min.css
// ../dist/legacy-assets/css/main.min.css.map
// ../dist/legacy-assets/css/rapid-prototype-main.css
// ../dist/legacy-assets/css/style.min.css
// ../dist/legacy-assets/css/third-party/c3.css
// ../dist/legacy-assets/css/third-party/jquery-ui.theme.min.css
// ../dist/legacy-assets/css/third-party/jquery.tagit.css
// ../dist/legacy-assets/css/third-party/pagedown.css
// ../dist/legacy-assets/css/third-party/responsive-tables.css
// ../dist/legacy-assets/css/third-party/sweetalert.css
// ../dist/legacy-assets/css/third-party/tagit.ui-zendesk.css
// ../dist/legacy-assets/font/Open_Sans/LICENSE.txt
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Bold.eot
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Bold.svg
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Bold.ttf
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Bold.woff
// ../dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.eot
// ../dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.svg
// ../dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.ttf
// ../dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.woff
// ../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.eot
// ../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.svg
// ../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.ttf
// ../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.woff
// ../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.eot
// ../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.svg
// ../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.ttf
// ../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.woff
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Italic.eot
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Italic.svg
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Italic.ttf
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Italic.woff
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Light.eot
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Light.svg
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Light.ttf
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Light.woff
// ../dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.eot
// ../dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.svg
// ../dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.ttf
// ../dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.woff
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Regular.eot
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Regular.svg
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Regular.ttf
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Regular.woff
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.eot
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.svg
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.ttf
// ../dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.woff
// ../dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.eot
// ../dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.svg
// ../dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.ttf
// ../dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.woff
// ../dist/legacy-assets/font/Roboto_Slab/LICENSE.txt
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.eot
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.svg
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.ttf
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.woff
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.eot
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.svg
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.ttf
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.woff
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.eot
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.svg
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.ttf
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.woff
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.eot
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.svg
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.ttf
// ../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.woff
// ../dist/legacy-assets/font/Ubuntu_Mono/UFL.txt
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.eot
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.svg
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.ttf
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.woff
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.eot
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.svg
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.ttf
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.woff
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.eot
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.svg
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.ttf
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.woff
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.eot
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.svg
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.ttf
// ../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.woff
// ../dist/legacy-assets/font/florence.eot
// ../dist/legacy-assets/font/florence.svg
// ../dist/legacy-assets/font/florence.ttf
// ../dist/legacy-assets/font/florence.woff
// ../dist/legacy-assets/img/flo-logo.png
// ../dist/legacy-assets/img/rule-21.png
// ../dist/legacy-assets/img/rule-22.png
// ../dist/legacy-assets/img/rule.png
// ../dist/legacy-assets/img/sb_v_double_arrow.png
// ../dist/legacy-assets/img/semi-transparent-bg.png
// ../dist/legacy-assets/img/sprite.png
// ../dist/legacy-assets/img/ui-bg_diagonals-thick_18_b81900_40x40.png
// ../dist/legacy-assets/img/ui-bg_diagonals-thick_20_666666_40x40.png
// ../dist/legacy-assets/img/ui-bg_flat_10_000000_40x100.png
// ../dist/legacy-assets/img/ui-bg_glass_100_f6f6f6_1x400.png
// ../dist/legacy-assets/img/ui-bg_glass_100_fdf5ce_1x400.png
// ../dist/legacy-assets/img/ui-bg_glass_65_ffffff_1x400.png
// ../dist/legacy-assets/img/ui-bg_gloss-wave_35_f6a828_500x100.png
// ../dist/legacy-assets/img/ui-bg_highlight-soft_100_eeeeee_1x100.png
// ../dist/legacy-assets/img/ui-bg_highlight-soft_75_ffe45c_1x100.png
// ../dist/legacy-assets/img/ui-icons_222222_256x240.png
// ../dist/legacy-assets/img/ui-icons_228ef1_256x240.png
// ../dist/legacy-assets/img/ui-icons_ef8c08_256x240.png
// ../dist/legacy-assets/img/ui-icons_ffd27a_256x240.png
// ../dist/legacy-assets/img/ui-icons_ffffff_256x240.png
// ../dist/legacy-assets/img/wmd-buttons.png
// ../dist/legacy-assets/index.html
// ../dist/legacy-assets/js/classes/cookieUtils.js
// ../dist/legacy-assets/js/classes/ermintrude.js
// ../dist/legacy-assets/js/classes/pathUtils.js
// ../dist/legacy-assets/js/functions/__init.js
// ../dist/legacy-assets/js/functions/_checkDocuments.js
// ../dist/legacy-assets/js/functions/_checkForPageChanged.js
// ../dist/legacy-assets/js/functions/_checkPathSlashes.js
// ../dist/legacy-assets/js/functions/_createWorkspace.js
// ../dist/legacy-assets/js/functions/_getCollection.js
// ../dist/legacy-assets/js/functions/_getPathName.js
// ../dist/legacy-assets/js/functions/_getPathNameTrimLast.js
// ../dist/legacy-assets/js/functions/_handleApiError.js
// ../dist/legacy-assets/js/functions/_hideBudHerd.js
// ../dist/legacy-assets/js/functions/_logout.js
// ../dist/legacy-assets/js/functions/_postLogin.js
// ../dist/legacy-assets/js/functions/_postPassword.js
// ../dist/legacy-assets/js/functions/_refreshPreview.js
// ../dist/legacy-assets/js/functions/_setupErmintrude.js
// ../dist/legacy-assets/js/functions/_viewChangePassword.js
// ../dist/legacy-assets/js/functions/_viewCollectionDetails.js
// ../dist/legacy-assets/js/functions/_viewCollections.js
// ../dist/legacy-assets/js/functions/_viewController.js
// ../dist/legacy-assets/js/functions/_viewLogIn.js
// ../dist/legacy-assets/js/jquery.min.js
// ../dist/legacy-assets/js/main.js
// ../dist/legacy-assets/js/templates.js
// ../dist/legacy-assets/js/third-party/Markdown.Converter.js
// ../dist/legacy-assets/js/third-party/Markdown.Editor.js
// ../dist/legacy-assets/js/third-party/Markdown.Extra.js
// ../dist/legacy-assets/js/third-party/Markdown.Sanitizer.js
// ../dist/legacy-assets/js/third-party/MathJax.js
// ../dist/legacy-assets/js/third-party/ZeroClipboard.min.js
// ../dist/legacy-assets/js/third-party/ZeroClipboard.swf
// ../dist/legacy-assets/js/third-party/autosize.js
// ../dist/legacy-assets/js/third-party/handlebars.runtime.min.js
// ../dist/legacy-assets/js/third-party/highcharts-more.js
// ../dist/legacy-assets/js/third-party/highcharts.js
// ../dist/legacy-assets/js/third-party/jquery-ui-timepicker-addon.js
// ../dist/legacy-assets/js/third-party/jquery-ui.js
// ../dist/legacy-assets/js/third-party/jquery.hotkeys.js
// ../dist/legacy-assets/js/third-party/sweetalert.min.js
// ../dist/legacy-assets/js/third-party/tag-it.js
// ../dist/legacy-assets/js/third-party/underscore-min.js
// ../dist/legacy-assets/js/third-party/underscore-min.map
// ../dist/legacy-assets/package-lock.json
// ../dist/legacy-assets/package.json
// ../dist/legacy-assets/scss/all.scss
// ../dist/legacy-assets/scss/main.scss
// ../dist/legacy-assets/scss/partials/_base.scss
// ../dist/legacy-assets/scss/partials/_collections.scss
// ../dist/legacy-assets/scss/partials/_colour-palette.scss
// ../dist/legacy-assets/scss/partials/_elements.scss
// ../dist/legacy-assets/scss/partials/_fonts.scss
// ../dist/legacy-assets/scss/partials/_grid.scss
// ../dist/legacy-assets/scss/partials/_jqui.scss
// ../dist/legacy-assets/scss/partials/_publish.scss
// ../dist/legacy-assets/scss/partials/_reset.scss
// ../dist/legacy-assets/scss/partials/_shame.scss
// ../dist/legacy-assets/scss/partials/_typography copy.scss
// ../dist/legacy-assets/scss/partials/_typography.scss
// ../dist/legacy-assets/scss/partials/_workspace.scss
// ../dist/legacy-assets/scss/pattern-library/README.md
// ../dist/legacy-assets/scss/pattern-library/_colors.scss
// ../dist/legacy-assets/scss/pattern-library/_settings.scss
// ../dist/legacy-assets/scss/pattern-library/core/README.md
// ../dist/legacy-assets/scss/pattern-library/core/_base.scss
// ../dist/legacy-assets/scss/pattern-library/core/_hiding.scss
// ../dist/legacy-assets/scss/pattern-library/core/_mixins.scss
// ../dist/legacy-assets/scss/pattern-library/core/_print.scss
// ../dist/legacy-assets/scss/pattern-library/core/_skiplinks.scss
// ../dist/legacy-assets/scss/pattern-library/core/_utils.scss
// ../dist/legacy-assets/scss/pattern-library/core/vendor/README.md
// ../dist/legacy-assets/scss/pattern-library/core/vendor/grid/_proportional-grids.scss
// ../dist/legacy-assets/scss/pattern-library/core/vendor/normalize/README.md
// ../dist/legacy-assets/scss/pattern-library/core/vendor/normalize/_normalize-mod.scss
// ../dist/legacy-assets/scss/pattern-library/core/vendor/normalize/_normalize.scss
// ../dist/legacy-assets/scss/pattern-library/lib/_tooltipster.scss
// ../dist/legacy-assets/scss/pattern-library/main.scss
// ../dist/legacy-assets/scss/pattern-library/oldie.scss
// ../dist/legacy-assets/scss/pattern-library/project/README.md
// ../dist/legacy-assets/scss/pattern-library/project/_base.scss
// ../dist/legacy-assets/scss/pattern-library/project/_icons.scss
// ../dist/legacy-assets/scss/pattern-library/project/_layout.scss
// ../dist/legacy-assets/scss/pattern-library/project/_tooltips.scss
// ../dist/legacy-assets/scss/pattern-library/project/_utilities.scss
// ../dist/legacy-assets/scss/pattern-library/project/_wrapper.scss
// ../dist/legacy-assets/scss/pattern-library/project/components/_article-header.scss
// ../dist/legacy-assets/scss/pattern-library/project/components/_chart-area.scss
// ../dist/legacy-assets/scss/pattern-library/project/components/_charts.scss
// ../dist/legacy-assets/scss/pattern-library/project/components/_data-tables.scss
// ../dist/legacy-assets/scss/pattern-library/project/components/_footnotes.scss
// ../dist/legacy-assets/scss/pattern-library/project/components/_global-footer.scss
// ../dist/legacy-assets/scss/pattern-library/project/components/_global-header.scss
// ../dist/legacy-assets/scss/pattern-library/project/components/_hero-banner.scss
// ../dist/legacy-assets/scss/pattern-library/project/components/_page-header.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_actionable-header.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_boxes.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_buttons.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_content-image.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_dates.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_divider.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_hero.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_link-complex.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_list-table.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_lozenges.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_media.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_nav-panels.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_navs-primary.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_navs.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_panels.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_slates.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_split.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_stat-callout.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_stats.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_supporting-content.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_table-of-contents.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_tables.scss
// ../dist/legacy-assets/scss/pattern-library/project/patterns/_tabs.scss
// ../dist/legacy-assets/scss/pattern-library/project/ui-patterns/_forms.scss
// ../dist/legacy-assets/scss/pattern-library/project/vendor/README.md
// ../dist/legacy-assets/scss/pattern-library/project/visual-language/_colors.scss
// ../dist/legacy-assets/scss/pattern-library/project/visual-language/_fonts.scss
// ../dist/legacy-assets/scss/pattern-library/project/visual-language/_grid.scss
// ../dist/legacy-assets/scss/pattern-library/project/visual-language/_lists.scss
// ../dist/legacy-assets/scss/pattern-library/project/visual-language/_type.scss
// ../dist/legacy-assets/scss/style.scss
// ../dist/legacy-assets/scss/third-party/epiceditor/images/edit.png
// ../dist/legacy-assets/scss/third-party/epiceditor/images/fullscreen.png
// ../dist/legacy-assets/scss/third-party/epiceditor/images/preview.png
// ../dist/legacy-assets/templates/browseNode.handlebars
// ../dist/legacy-assets/templates/changePassword.handlebars
// ../dist/legacy-assets/templates/collectionDetails.handlebars
// ../dist/legacy-assets/templates/collectionList.handlebars
// ../dist/legacy-assets/templates/ermintrude.handlebars
// ../dist/legacy-assets/templates/login.handlebars
// ../dist/legacy-assets/templates/mainNav.handlebars
// ../dist/legacy-assets/templates/mainNavSelect.handlebars
// ../dist/legacy-assets/templates/userDetails.handlebars
// DO NOT EDIT!

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// DistLegacyAssetsCssFlorenceCss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsCssFlorenceCss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/css/florence.css"
	name := "../dist/legacy-assets/css/florence.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsCssMainMinCss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsCssMainMinCss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/css/main.min.css"
	name := "../dist/legacy-assets/css/main.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsCssMainMinCssMap reads file data from disk. It returns an error on failure.
func DistLegacyAssetsCssMainMinCssMap() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/css/main.min.css.map"
	name := "../dist/legacy-assets/css/main.min.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsCssRapidPrototypeMainCss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsCssRapidPrototypeMainCss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/css/rapid-prototype-main.css"
	name := "../dist/legacy-assets/css/rapid-prototype-main.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsCssStyleMinCss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsCssStyleMinCss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/css/style.min.css"
	name := "../dist/legacy-assets/css/style.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsCssThirdPartyC3Css reads file data from disk. It returns an error on failure.
func DistLegacyAssetsCssThirdPartyC3Css() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/css/third-party/c3.css"
	name := "../dist/legacy-assets/css/third-party/c3.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsCssThirdPartyJqueryUiThemeMinCss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsCssThirdPartyJqueryUiThemeMinCss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/css/third-party/jquery-ui.theme.min.css"
	name := "../dist/legacy-assets/css/third-party/jquery-ui.theme.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsCssThirdPartyJqueryTagitCss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsCssThirdPartyJqueryTagitCss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/css/third-party/jquery.tagit.css"
	name := "../dist/legacy-assets/css/third-party/jquery.tagit.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsCssThirdPartyPagedownCss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsCssThirdPartyPagedownCss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/css/third-party/pagedown.css"
	name := "../dist/legacy-assets/css/third-party/pagedown.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsCssThirdPartyResponsiveTablesCss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsCssThirdPartyResponsiveTablesCss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/css/third-party/responsive-tables.css"
	name := "../dist/legacy-assets/css/third-party/responsive-tables.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsCssThirdPartySweetalertCss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsCssThirdPartySweetalertCss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/css/third-party/sweetalert.css"
	name := "../dist/legacy-assets/css/third-party/sweetalert.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsCssThirdPartyTagitUiZendeskCss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsCssThirdPartyTagitUiZendeskCss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/css/third-party/tagit.ui-zendesk.css"
	name := "../dist/legacy-assets/css/third-party/tagit.ui-zendesk.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansLicenseTxt reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansLicenseTxt() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/LICENSE.txt"
	name := "../dist/legacy-assets/font/Open_Sans/LICENSE.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansBoldEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansBoldEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Bold.eot"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Bold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansBoldSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansBoldSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Bold.svg"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Bold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansBoldTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansBoldTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Bold.ttf"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Bold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansBoldWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansBoldWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Bold.woff"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Bold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansBolditalicEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansBolditalicEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.eot"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansBolditalicSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansBolditalicSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.svg"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansBolditalicTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansBolditalicTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.ttf"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansBolditalicWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansBolditalicWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.woff"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansExtraboldEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansExtraboldEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.eot"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansExtraboldSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansExtraboldSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.svg"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansExtraboldTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansExtraboldTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.ttf"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansExtraboldWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansExtraboldWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.woff"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.eot"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.svg"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.ttf"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.woff"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansItalicEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansItalicEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Italic.eot"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Italic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansItalicSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansItalicSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Italic.svg"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Italic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansItalicTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansItalicTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Italic.ttf"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Italic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansItalicWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansItalicWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Italic.woff"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Italic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansLightEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansLightEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Light.eot"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Light.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansLightSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansLightSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Light.svg"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Light.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansLightTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansLightTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Light.ttf"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Light.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansLightWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansLightWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Light.woff"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Light.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansLightitalicEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansLightitalicEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.eot"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansLightitalicSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansLightitalicSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.svg"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansLightitalicTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansLightitalicTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.ttf"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansLightitalicWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansLightitalicWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.woff"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansRegularEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansRegularEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Regular.eot"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansRegularSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansRegularSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Regular.svg"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansRegularTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansRegularTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Regular.ttf"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansRegularWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansRegularWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Regular.woff"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansSemiboldEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansSemiboldEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.eot"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansSemiboldSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansSemiboldSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.svg"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansSemiboldTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansSemiboldTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.ttf"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansSemiboldWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansSemiboldWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.woff"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansSemibolditalicEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansSemibolditalicEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.eot"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansSemibolditalicSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansSemibolditalicSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.svg"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansSemibolditalicTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansSemibolditalicTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.ttf"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontOpen_sansOpensansSemibolditalicWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontOpen_sansOpensansSemibolditalicWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.woff"
	name := "../dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabLicenseTxt reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabLicenseTxt() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/LICENSE.txt"
	name := "../dist/legacy-assets/font/Roboto_Slab/LICENSE.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabBoldEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabBoldEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.eot"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabBoldSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabBoldSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.svg"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabBoldTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabBoldTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.ttf"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabBoldWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabBoldWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.woff"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabLightEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabLightEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.eot"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabLightSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabLightSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.svg"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabLightTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabLightTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.ttf"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabLightWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabLightWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.woff"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabRegularEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabRegularEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.eot"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabRegularSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabRegularSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.svg"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabRegularTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabRegularTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.ttf"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabRegularWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabRegularWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.woff"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabThinEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabThinEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.eot"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabThinSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabThinSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.svg"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabThinTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabThinTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.ttf"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontRoboto_slabRobotoslabThinWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontRoboto_slabRobotoslabThinWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.woff"
	name := "../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUflTxt reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUflTxt() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UFL.txt"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UFL.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.eot"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.svg"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.ttf"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.woff"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.eot"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.svg"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.ttf"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.woff"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.eot"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.svg"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.ttf"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.woff"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.eot"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.svg"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.ttf"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.woff"
	name := "../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontFlorenceEot reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontFlorenceEot() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/florence.eot"
	name := "../dist/legacy-assets/font/florence.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontFlorenceSvg reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontFlorenceSvg() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/florence.svg"
	name := "../dist/legacy-assets/font/florence.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontFlorenceTtf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontFlorenceTtf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/florence.ttf"
	name := "../dist/legacy-assets/font/florence.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsFontFlorenceWoff reads file data from disk. It returns an error on failure.
func DistLegacyAssetsFontFlorenceWoff() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/font/florence.woff"
	name := "../dist/legacy-assets/font/florence.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgFloLogoPng reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgFloLogoPng() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/flo-logo.png"
	name := "../dist/legacy-assets/img/flo-logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgRule21Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgRule21Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/rule-21.png"
	name := "../dist/legacy-assets/img/rule-21.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgRule22Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgRule22Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/rule-22.png"
	name := "../dist/legacy-assets/img/rule-22.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgRulePng reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgRulePng() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/rule.png"
	name := "../dist/legacy-assets/img/rule.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgSb_v_double_arrowPng reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgSb_v_double_arrowPng() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/sb_v_double_arrow.png"
	name := "../dist/legacy-assets/img/sb_v_double_arrow.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgSemiTransparentBgPng reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgSemiTransparentBgPng() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/semi-transparent-bg.png"
	name := "../dist/legacy-assets/img/semi-transparent-bg.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgSpritePng reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgSpritePng() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/sprite.png"
	name := "../dist/legacy-assets/img/sprite.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgUiBg_diagonalsThick_18_b81900_40x40Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgUiBg_diagonalsThick_18_b81900_40x40Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/ui-bg_diagonals-thick_18_b81900_40x40.png"
	name := "../dist/legacy-assets/img/ui-bg_diagonals-thick_18_b81900_40x40.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgUiBg_diagonalsThick_20_666666_40x40Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgUiBg_diagonalsThick_20_666666_40x40Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/ui-bg_diagonals-thick_20_666666_40x40.png"
	name := "../dist/legacy-assets/img/ui-bg_diagonals-thick_20_666666_40x40.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgUiBg_flat_10_000000_40x100Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgUiBg_flat_10_000000_40x100Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/ui-bg_flat_10_000000_40x100.png"
	name := "../dist/legacy-assets/img/ui-bg_flat_10_000000_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgUiBg_glass_100_f6f6f6_1x400Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgUiBg_glass_100_f6f6f6_1x400Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/ui-bg_glass_100_f6f6f6_1x400.png"
	name := "../dist/legacy-assets/img/ui-bg_glass_100_f6f6f6_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgUiBg_glass_100_fdf5ce_1x400Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgUiBg_glass_100_fdf5ce_1x400Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/ui-bg_glass_100_fdf5ce_1x400.png"
	name := "../dist/legacy-assets/img/ui-bg_glass_100_fdf5ce_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgUiBg_glass_65_ffffff_1x400Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgUiBg_glass_65_ffffff_1x400Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/ui-bg_glass_65_ffffff_1x400.png"
	name := "../dist/legacy-assets/img/ui-bg_glass_65_ffffff_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgUiBg_glossWave_35_f6a828_500x100Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgUiBg_glossWave_35_f6a828_500x100Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/ui-bg_gloss-wave_35_f6a828_500x100.png"
	name := "../dist/legacy-assets/img/ui-bg_gloss-wave_35_f6a828_500x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgUiBg_highlightSoft_100_eeeeee_1x100Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgUiBg_highlightSoft_100_eeeeee_1x100Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/ui-bg_highlight-soft_100_eeeeee_1x100.png"
	name := "../dist/legacy-assets/img/ui-bg_highlight-soft_100_eeeeee_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgUiBg_highlightSoft_75_ffe45c_1x100Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgUiBg_highlightSoft_75_ffe45c_1x100Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/ui-bg_highlight-soft_75_ffe45c_1x100.png"
	name := "../dist/legacy-assets/img/ui-bg_highlight-soft_75_ffe45c_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgUiIcons_222222_256x240Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgUiIcons_222222_256x240Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/ui-icons_222222_256x240.png"
	name := "../dist/legacy-assets/img/ui-icons_222222_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgUiIcons_228ef1_256x240Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgUiIcons_228ef1_256x240Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/ui-icons_228ef1_256x240.png"
	name := "../dist/legacy-assets/img/ui-icons_228ef1_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgUiIcons_ef8c08_256x240Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgUiIcons_ef8c08_256x240Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/ui-icons_ef8c08_256x240.png"
	name := "../dist/legacy-assets/img/ui-icons_ef8c08_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgUiIcons_ffd27a_256x240Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgUiIcons_ffd27a_256x240Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/ui-icons_ffd27a_256x240.png"
	name := "../dist/legacy-assets/img/ui-icons_ffd27a_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgUiIcons_ffffff_256x240Png reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgUiIcons_ffffff_256x240Png() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/ui-icons_ffffff_256x240.png"
	name := "../dist/legacy-assets/img/ui-icons_ffffff_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsImgWmdButtonsPng reads file data from disk. It returns an error on failure.
func DistLegacyAssetsImgWmdButtonsPng() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/img/wmd-buttons.png"
	name := "../dist/legacy-assets/img/wmd-buttons.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsIndexHtml reads file data from disk. It returns an error on failure.
func DistLegacyAssetsIndexHtml() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/index.html"
	name := "../dist/legacy-assets/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsClassesCookieutilsJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsClassesCookieutilsJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/classes/cookieUtils.js"
	name := "../dist/legacy-assets/js/classes/cookieUtils.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsClassesErmintrudeJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsClassesErmintrudeJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/classes/ermintrude.js"
	name := "../dist/legacy-assets/js/classes/ermintrude.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsClassesPathutilsJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsClassesPathutilsJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/classes/pathUtils.js"
	name := "../dist/legacy-assets/js/classes/pathUtils.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions__initJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions__initJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/__init.js"
	name := "../dist/legacy-assets/js/functions/__init.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_checkdocumentsJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_checkdocumentsJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_checkDocuments.js"
	name := "../dist/legacy-assets/js/functions/_checkDocuments.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_checkforpagechangedJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_checkforpagechangedJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_checkForPageChanged.js"
	name := "../dist/legacy-assets/js/functions/_checkForPageChanged.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_checkpathslashesJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_checkpathslashesJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_checkPathSlashes.js"
	name := "../dist/legacy-assets/js/functions/_checkPathSlashes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_createworkspaceJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_createworkspaceJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_createWorkspace.js"
	name := "../dist/legacy-assets/js/functions/_createWorkspace.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_getcollectionJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_getcollectionJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_getCollection.js"
	name := "../dist/legacy-assets/js/functions/_getCollection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_getpathnameJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_getpathnameJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_getPathName.js"
	name := "../dist/legacy-assets/js/functions/_getPathName.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_getpathnametrimlastJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_getpathnametrimlastJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_getPathNameTrimLast.js"
	name := "../dist/legacy-assets/js/functions/_getPathNameTrimLast.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_handleapierrorJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_handleapierrorJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_handleApiError.js"
	name := "../dist/legacy-assets/js/functions/_handleApiError.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_hidebudherdJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_hidebudherdJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_hideBudHerd.js"
	name := "../dist/legacy-assets/js/functions/_hideBudHerd.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_logoutJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_logoutJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_logout.js"
	name := "../dist/legacy-assets/js/functions/_logout.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_postloginJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_postloginJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_postLogin.js"
	name := "../dist/legacy-assets/js/functions/_postLogin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_postpasswordJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_postpasswordJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_postPassword.js"
	name := "../dist/legacy-assets/js/functions/_postPassword.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_refreshpreviewJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_refreshpreviewJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_refreshPreview.js"
	name := "../dist/legacy-assets/js/functions/_refreshPreview.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_setupermintrudeJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_setupermintrudeJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_setupErmintrude.js"
	name := "../dist/legacy-assets/js/functions/_setupErmintrude.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_viewchangepasswordJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_viewchangepasswordJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_viewChangePassword.js"
	name := "../dist/legacy-assets/js/functions/_viewChangePassword.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_viewcollectiondetailsJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_viewcollectiondetailsJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_viewCollectionDetails.js"
	name := "../dist/legacy-assets/js/functions/_viewCollectionDetails.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_viewcollectionsJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_viewcollectionsJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_viewCollections.js"
	name := "../dist/legacy-assets/js/functions/_viewCollections.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_viewcontrollerJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_viewcontrollerJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_viewController.js"
	name := "../dist/legacy-assets/js/functions/_viewController.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsFunctions_viewloginJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsFunctions_viewloginJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/functions/_viewLogIn.js"
	name := "../dist/legacy-assets/js/functions/_viewLogIn.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsJqueryMinJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsJqueryMinJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/jquery.min.js"
	name := "../dist/legacy-assets/js/jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsMainJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsMainJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/main.js"
	name := "../dist/legacy-assets/js/main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsTemplatesJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsTemplatesJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/templates.js"
	name := "../dist/legacy-assets/js/templates.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyMarkdownConverterJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyMarkdownConverterJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/Markdown.Converter.js"
	name := "../dist/legacy-assets/js/third-party/Markdown.Converter.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyMarkdownEditorJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyMarkdownEditorJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/Markdown.Editor.js"
	name := "../dist/legacy-assets/js/third-party/Markdown.Editor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyMarkdownExtraJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyMarkdownExtraJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/Markdown.Extra.js"
	name := "../dist/legacy-assets/js/third-party/Markdown.Extra.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyMarkdownSanitizerJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyMarkdownSanitizerJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/Markdown.Sanitizer.js"
	name := "../dist/legacy-assets/js/third-party/Markdown.Sanitizer.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyMathjaxJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyMathjaxJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/MathJax.js"
	name := "../dist/legacy-assets/js/third-party/MathJax.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyZeroclipboardMinJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyZeroclipboardMinJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/ZeroClipboard.min.js"
	name := "../dist/legacy-assets/js/third-party/ZeroClipboard.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyZeroclipboardSwf reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyZeroclipboardSwf() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/ZeroClipboard.swf"
	name := "../dist/legacy-assets/js/third-party/ZeroClipboard.swf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyAutosizeJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyAutosizeJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/autosize.js"
	name := "../dist/legacy-assets/js/third-party/autosize.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyHandlebarsRuntimeMinJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyHandlebarsRuntimeMinJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/handlebars.runtime.min.js"
	name := "../dist/legacy-assets/js/third-party/handlebars.runtime.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyHighchartsMoreJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyHighchartsMoreJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/highcharts-more.js"
	name := "../dist/legacy-assets/js/third-party/highcharts-more.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyHighchartsJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyHighchartsJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/highcharts.js"
	name := "../dist/legacy-assets/js/third-party/highcharts.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyJqueryUiTimepickerAddonJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyJqueryUiTimepickerAddonJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/jquery-ui-timepicker-addon.js"
	name := "../dist/legacy-assets/js/third-party/jquery-ui-timepicker-addon.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyJqueryUiJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyJqueryUiJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/jquery-ui.js"
	name := "../dist/legacy-assets/js/third-party/jquery-ui.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyJqueryHotkeysJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyJqueryHotkeysJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/jquery.hotkeys.js"
	name := "../dist/legacy-assets/js/third-party/jquery.hotkeys.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartySweetalertMinJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartySweetalertMinJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/sweetalert.min.js"
	name := "../dist/legacy-assets/js/third-party/sweetalert.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyTagItJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyTagItJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/tag-it.js"
	name := "../dist/legacy-assets/js/third-party/tag-it.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyUnderscoreMinJs reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyUnderscoreMinJs() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/underscore-min.js"
	name := "../dist/legacy-assets/js/third-party/underscore-min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsJsThirdPartyUnderscoreMinMap reads file data from disk. It returns an error on failure.
func DistLegacyAssetsJsThirdPartyUnderscoreMinMap() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/js/third-party/underscore-min.map"
	name := "../dist/legacy-assets/js/third-party/underscore-min.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsPackageLockJson reads file data from disk. It returns an error on failure.
func DistLegacyAssetsPackageLockJson() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/package-lock.json"
	name := "../dist/legacy-assets/package-lock.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsPackageJson reads file data from disk. It returns an error on failure.
func DistLegacyAssetsPackageJson() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/package.json"
	name := "../dist/legacy-assets/package.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssAllScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssAllScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/all.scss"
	name := "../dist/legacy-assets/scss/all.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssMainScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssMainScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/main.scss"
	name := "../dist/legacy-assets/scss/main.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPartials_baseScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPartials_baseScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/partials/_base.scss"
	name := "../dist/legacy-assets/scss/partials/_base.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPartials_collectionsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPartials_collectionsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/partials/_collections.scss"
	name := "../dist/legacy-assets/scss/partials/_collections.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPartials_colourPaletteScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPartials_colourPaletteScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/partials/_colour-palette.scss"
	name := "../dist/legacy-assets/scss/partials/_colour-palette.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPartials_elementsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPartials_elementsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/partials/_elements.scss"
	name := "../dist/legacy-assets/scss/partials/_elements.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPartials_fontsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPartials_fontsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/partials/_fonts.scss"
	name := "../dist/legacy-assets/scss/partials/_fonts.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPartials_gridScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPartials_gridScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/partials/_grid.scss"
	name := "../dist/legacy-assets/scss/partials/_grid.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPartials_jquiScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPartials_jquiScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/partials/_jqui.scss"
	name := "../dist/legacy-assets/scss/partials/_jqui.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPartials_publishScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPartials_publishScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/partials/_publish.scss"
	name := "../dist/legacy-assets/scss/partials/_publish.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPartials_resetScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPartials_resetScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/partials/_reset.scss"
	name := "../dist/legacy-assets/scss/partials/_reset.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPartials_shameScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPartials_shameScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/partials/_shame.scss"
	name := "../dist/legacy-assets/scss/partials/_shame.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPartials_typographyCopyScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPartials_typographyCopyScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/partials/_typography copy.scss"
	name := "../dist/legacy-assets/scss/partials/_typography copy.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPartials_typographyScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPartials_typographyScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/partials/_typography.scss"
	name := "../dist/legacy-assets/scss/partials/_typography.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPartials_workspaceScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPartials_workspaceScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/partials/_workspace.scss"
	name := "../dist/legacy-assets/scss/partials/_workspace.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryReadmeMd reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryReadmeMd() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/README.md"
	name := "../dist/legacy-assets/scss/pattern-library/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibrary_colorsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibrary_colorsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/_colors.scss"
	name := "../dist/legacy-assets/scss/pattern-library/_colors.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibrary_settingsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibrary_settingsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/_settings.scss"
	name := "../dist/legacy-assets/scss/pattern-library/_settings.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryCoreReadmeMd reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryCoreReadmeMd() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/core/README.md"
	name := "../dist/legacy-assets/scss/pattern-library/core/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryCore_baseScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryCore_baseScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/core/_base.scss"
	name := "../dist/legacy-assets/scss/pattern-library/core/_base.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryCore_hidingScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryCore_hidingScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/core/_hiding.scss"
	name := "../dist/legacy-assets/scss/pattern-library/core/_hiding.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryCore_mixinsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryCore_mixinsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/core/_mixins.scss"
	name := "../dist/legacy-assets/scss/pattern-library/core/_mixins.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryCore_printScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryCore_printScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/core/_print.scss"
	name := "../dist/legacy-assets/scss/pattern-library/core/_print.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryCore_skiplinksScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryCore_skiplinksScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/core/_skiplinks.scss"
	name := "../dist/legacy-assets/scss/pattern-library/core/_skiplinks.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryCore_utilsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryCore_utilsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/core/_utils.scss"
	name := "../dist/legacy-assets/scss/pattern-library/core/_utils.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryCoreVendorReadmeMd reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryCoreVendorReadmeMd() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/core/vendor/README.md"
	name := "../dist/legacy-assets/scss/pattern-library/core/vendor/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryCoreVendorGrid_proportionalGridsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryCoreVendorGrid_proportionalGridsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/core/vendor/grid/_proportional-grids.scss"
	name := "../dist/legacy-assets/scss/pattern-library/core/vendor/grid/_proportional-grids.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryCoreVendorNormalizeReadmeMd reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryCoreVendorNormalizeReadmeMd() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/core/vendor/normalize/README.md"
	name := "../dist/legacy-assets/scss/pattern-library/core/vendor/normalize/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryCoreVendorNormalize_normalizeModScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryCoreVendorNormalize_normalizeModScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/core/vendor/normalize/_normalize-mod.scss"
	name := "../dist/legacy-assets/scss/pattern-library/core/vendor/normalize/_normalize-mod.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryCoreVendorNormalize_normalizeScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryCoreVendorNormalize_normalizeScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/core/vendor/normalize/_normalize.scss"
	name := "../dist/legacy-assets/scss/pattern-library/core/vendor/normalize/_normalize.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryLib_tooltipsterScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryLib_tooltipsterScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/lib/_tooltipster.scss"
	name := "../dist/legacy-assets/scss/pattern-library/lib/_tooltipster.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryMainScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryMainScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/main.scss"
	name := "../dist/legacy-assets/scss/pattern-library/main.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryOldieScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryOldieScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/oldie.scss"
	name := "../dist/legacy-assets/scss/pattern-library/oldie.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectReadmeMd reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectReadmeMd() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/README.md"
	name := "../dist/legacy-assets/scss/pattern-library/project/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProject_baseScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProject_baseScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/_base.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/_base.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProject_iconsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProject_iconsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/_icons.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/_icons.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProject_layoutScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProject_layoutScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/_layout.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/_layout.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProject_tooltipsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProject_tooltipsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/_tooltips.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/_tooltips.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProject_utilitiesScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProject_utilitiesScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/_utilities.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/_utilities.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProject_wrapperScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProject_wrapperScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/_wrapper.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/_wrapper.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectComponents_articleHeaderScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectComponents_articleHeaderScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/components/_article-header.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/components/_article-header.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectComponents_chartAreaScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectComponents_chartAreaScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/components/_chart-area.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/components/_chart-area.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectComponents_chartsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectComponents_chartsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/components/_charts.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/components/_charts.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectComponents_dataTablesScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectComponents_dataTablesScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/components/_data-tables.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/components/_data-tables.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectComponents_footnotesScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectComponents_footnotesScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/components/_footnotes.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/components/_footnotes.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectComponents_globalFooterScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectComponents_globalFooterScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/components/_global-footer.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/components/_global-footer.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectComponents_globalHeaderScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectComponents_globalHeaderScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/components/_global-header.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/components/_global-header.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectComponents_heroBannerScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectComponents_heroBannerScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/components/_hero-banner.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/components/_hero-banner.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectComponents_pageHeaderScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectComponents_pageHeaderScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/components/_page-header.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/components/_page-header.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_actionableHeaderScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_actionableHeaderScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_actionable-header.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_actionable-header.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_boxesScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_boxesScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_boxes.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_boxes.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_buttonsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_buttonsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_buttons.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_buttons.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_contentImageScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_contentImageScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_content-image.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_content-image.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_datesScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_datesScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_dates.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_dates.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_dividerScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_dividerScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_divider.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_divider.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_heroScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_heroScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_hero.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_hero.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_linkComplexScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_linkComplexScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_link-complex.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_link-complex.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_listTableScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_listTableScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_list-table.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_list-table.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_lozengesScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_lozengesScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_lozenges.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_lozenges.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_mediaScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_mediaScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_media.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_media.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_navPanelsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_navPanelsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_nav-panels.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_nav-panels.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_navsPrimaryScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_navsPrimaryScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_navs-primary.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_navs-primary.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_navsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_navsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_navs.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_navs.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_panelsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_panelsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_panels.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_panels.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_slatesScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_slatesScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_slates.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_slates.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_splitScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_splitScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_split.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_split.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_statCalloutScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_statCalloutScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_stat-callout.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_stat-callout.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_statsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_statsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_stats.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_stats.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_supportingContentScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_supportingContentScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_supporting-content.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_supporting-content.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_tableOfContentsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_tableOfContentsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_table-of-contents.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_table-of-contents.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_tablesScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_tablesScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_tables.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_tables.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectPatterns_tabsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectPatterns_tabsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/patterns/_tabs.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/patterns/_tabs.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectUiPatterns_formsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectUiPatterns_formsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/ui-patterns/_forms.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/ui-patterns/_forms.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectVendorReadmeMd reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectVendorReadmeMd() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/vendor/README.md"
	name := "../dist/legacy-assets/scss/pattern-library/project/vendor/README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_colorsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_colorsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/visual-language/_colors.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/visual-language/_colors.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_fontsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_fontsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/visual-language/_fonts.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/visual-language/_fonts.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_gridScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_gridScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/visual-language/_grid.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/visual-language/_grid.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_listsScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_listsScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/visual-language/_lists.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/visual-language/_lists.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_typeScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_typeScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/pattern-library/project/visual-language/_type.scss"
	name := "../dist/legacy-assets/scss/pattern-library/project/visual-language/_type.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssStyleScss reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssStyleScss() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/style.scss"
	name := "../dist/legacy-assets/scss/style.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssThirdPartyEpiceditorImagesEditPng reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssThirdPartyEpiceditorImagesEditPng() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/third-party/epiceditor/images/edit.png"
	name := "../dist/legacy-assets/scss/third-party/epiceditor/images/edit.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssThirdPartyEpiceditorImagesFullscreenPng reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssThirdPartyEpiceditorImagesFullscreenPng() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/third-party/epiceditor/images/fullscreen.png"
	name := "../dist/legacy-assets/scss/third-party/epiceditor/images/fullscreen.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsScssThirdPartyEpiceditorImagesPreviewPng reads file data from disk. It returns an error on failure.
func DistLegacyAssetsScssThirdPartyEpiceditorImagesPreviewPng() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/scss/third-party/epiceditor/images/preview.png"
	name := "../dist/legacy-assets/scss/third-party/epiceditor/images/preview.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsTemplatesBrowsenodeHandlebars reads file data from disk. It returns an error on failure.
func DistLegacyAssetsTemplatesBrowsenodeHandlebars() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/templates/browseNode.handlebars"
	name := "../dist/legacy-assets/templates/browseNode.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsTemplatesChangepasswordHandlebars reads file data from disk. It returns an error on failure.
func DistLegacyAssetsTemplatesChangepasswordHandlebars() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/templates/changePassword.handlebars"
	name := "../dist/legacy-assets/templates/changePassword.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsTemplatesCollectiondetailsHandlebars reads file data from disk. It returns an error on failure.
func DistLegacyAssetsTemplatesCollectiondetailsHandlebars() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/templates/collectionDetails.handlebars"
	name := "../dist/legacy-assets/templates/collectionDetails.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsTemplatesCollectionlistHandlebars reads file data from disk. It returns an error on failure.
func DistLegacyAssetsTemplatesCollectionlistHandlebars() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/templates/collectionList.handlebars"
	name := "../dist/legacy-assets/templates/collectionList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsTemplatesErmintrudeHandlebars reads file data from disk. It returns an error on failure.
func DistLegacyAssetsTemplatesErmintrudeHandlebars() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/templates/ermintrude.handlebars"
	name := "../dist/legacy-assets/templates/ermintrude.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsTemplatesLoginHandlebars reads file data from disk. It returns an error on failure.
func DistLegacyAssetsTemplatesLoginHandlebars() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/templates/login.handlebars"
	name := "../dist/legacy-assets/templates/login.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsTemplatesMainnavHandlebars reads file data from disk. It returns an error on failure.
func DistLegacyAssetsTemplatesMainnavHandlebars() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/templates/mainNav.handlebars"
	name := "../dist/legacy-assets/templates/mainNav.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsTemplatesMainnavselectHandlebars reads file data from disk. It returns an error on failure.
func DistLegacyAssetsTemplatesMainnavselectHandlebars() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/templates/mainNavSelect.handlebars"
	name := "../dist/legacy-assets/templates/mainNavSelect.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// DistLegacyAssetsTemplatesUserdetailsHandlebars reads file data from disk. It returns an error on failure.
func DistLegacyAssetsTemplatesUserdetailsHandlebars() (*asset, error) {
	path := "/Users/mrout/go/src/github.com/ONSdigital/ermintrude/dist/legacy-assets/templates/userDetails.handlebars"
	name := "../dist/legacy-assets/templates/userDetails.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../dist/legacy-assets/css/florence.css": DistLegacyAssetsCssFlorenceCss,
	"../dist/legacy-assets/css/main.min.css": DistLegacyAssetsCssMainMinCss,
	"../dist/legacy-assets/css/main.min.css.map": DistLegacyAssetsCssMainMinCssMap,
	"../dist/legacy-assets/css/rapid-prototype-main.css": DistLegacyAssetsCssRapidPrototypeMainCss,
	"../dist/legacy-assets/css/style.min.css": DistLegacyAssetsCssStyleMinCss,
	"../dist/legacy-assets/css/third-party/c3.css": DistLegacyAssetsCssThirdPartyC3Css,
	"../dist/legacy-assets/css/third-party/jquery-ui.theme.min.css": DistLegacyAssetsCssThirdPartyJqueryUiThemeMinCss,
	"../dist/legacy-assets/css/third-party/jquery.tagit.css": DistLegacyAssetsCssThirdPartyJqueryTagitCss,
	"../dist/legacy-assets/css/third-party/pagedown.css": DistLegacyAssetsCssThirdPartyPagedownCss,
	"../dist/legacy-assets/css/third-party/responsive-tables.css": DistLegacyAssetsCssThirdPartyResponsiveTablesCss,
	"../dist/legacy-assets/css/third-party/sweetalert.css": DistLegacyAssetsCssThirdPartySweetalertCss,
	"../dist/legacy-assets/css/third-party/tagit.ui-zendesk.css": DistLegacyAssetsCssThirdPartyTagitUiZendeskCss,
	"../dist/legacy-assets/font/Open_Sans/LICENSE.txt": DistLegacyAssetsFontOpen_sansLicenseTxt,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Bold.eot": DistLegacyAssetsFontOpen_sansOpensansBoldEot,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Bold.svg": DistLegacyAssetsFontOpen_sansOpensansBoldSvg,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Bold.ttf": DistLegacyAssetsFontOpen_sansOpensansBoldTtf,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Bold.woff": DistLegacyAssetsFontOpen_sansOpensansBoldWoff,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.eot": DistLegacyAssetsFontOpen_sansOpensansBolditalicEot,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.svg": DistLegacyAssetsFontOpen_sansOpensansBolditalicSvg,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.ttf": DistLegacyAssetsFontOpen_sansOpensansBolditalicTtf,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-BoldItalic.woff": DistLegacyAssetsFontOpen_sansOpensansBolditalicWoff,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.eot": DistLegacyAssetsFontOpen_sansOpensansExtraboldEot,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.svg": DistLegacyAssetsFontOpen_sansOpensansExtraboldSvg,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.ttf": DistLegacyAssetsFontOpen_sansOpensansExtraboldTtf,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBold.woff": DistLegacyAssetsFontOpen_sansOpensansExtraboldWoff,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.eot": DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicEot,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.svg": DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicSvg,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.ttf": DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicTtf,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-ExtraBoldItalic.woff": DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicWoff,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Italic.eot": DistLegacyAssetsFontOpen_sansOpensansItalicEot,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Italic.svg": DistLegacyAssetsFontOpen_sansOpensansItalicSvg,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Italic.ttf": DistLegacyAssetsFontOpen_sansOpensansItalicTtf,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Italic.woff": DistLegacyAssetsFontOpen_sansOpensansItalicWoff,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Light.eot": DistLegacyAssetsFontOpen_sansOpensansLightEot,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Light.svg": DistLegacyAssetsFontOpen_sansOpensansLightSvg,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Light.ttf": DistLegacyAssetsFontOpen_sansOpensansLightTtf,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Light.woff": DistLegacyAssetsFontOpen_sansOpensansLightWoff,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.eot": DistLegacyAssetsFontOpen_sansOpensansLightitalicEot,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.svg": DistLegacyAssetsFontOpen_sansOpensansLightitalicSvg,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.ttf": DistLegacyAssetsFontOpen_sansOpensansLightitalicTtf,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-LightItalic.woff": DistLegacyAssetsFontOpen_sansOpensansLightitalicWoff,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Regular.eot": DistLegacyAssetsFontOpen_sansOpensansRegularEot,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Regular.svg": DistLegacyAssetsFontOpen_sansOpensansRegularSvg,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Regular.ttf": DistLegacyAssetsFontOpen_sansOpensansRegularTtf,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Regular.woff": DistLegacyAssetsFontOpen_sansOpensansRegularWoff,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.eot": DistLegacyAssetsFontOpen_sansOpensansSemiboldEot,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.svg": DistLegacyAssetsFontOpen_sansOpensansSemiboldSvg,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.ttf": DistLegacyAssetsFontOpen_sansOpensansSemiboldTtf,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-Semibold.woff": DistLegacyAssetsFontOpen_sansOpensansSemiboldWoff,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.eot": DistLegacyAssetsFontOpen_sansOpensansSemibolditalicEot,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.svg": DistLegacyAssetsFontOpen_sansOpensansSemibolditalicSvg,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.ttf": DistLegacyAssetsFontOpen_sansOpensansSemibolditalicTtf,
	"../dist/legacy-assets/font/Open_Sans/OpenSans-SemiboldItalic.woff": DistLegacyAssetsFontOpen_sansOpensansSemibolditalicWoff,
	"../dist/legacy-assets/font/Roboto_Slab/LICENSE.txt": DistLegacyAssetsFontRoboto_slabLicenseTxt,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.eot": DistLegacyAssetsFontRoboto_slabRobotoslabBoldEot,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.svg": DistLegacyAssetsFontRoboto_slabRobotoslabBoldSvg,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.ttf": DistLegacyAssetsFontRoboto_slabRobotoslabBoldTtf,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Bold.woff": DistLegacyAssetsFontRoboto_slabRobotoslabBoldWoff,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.eot": DistLegacyAssetsFontRoboto_slabRobotoslabLightEot,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.svg": DistLegacyAssetsFontRoboto_slabRobotoslabLightSvg,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.ttf": DistLegacyAssetsFontRoboto_slabRobotoslabLightTtf,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Light.woff": DistLegacyAssetsFontRoboto_slabRobotoslabLightWoff,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.eot": DistLegacyAssetsFontRoboto_slabRobotoslabRegularEot,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.svg": DistLegacyAssetsFontRoboto_slabRobotoslabRegularSvg,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.ttf": DistLegacyAssetsFontRoboto_slabRobotoslabRegularTtf,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Regular.woff": DistLegacyAssetsFontRoboto_slabRobotoslabRegularWoff,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.eot": DistLegacyAssetsFontRoboto_slabRobotoslabThinEot,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.svg": DistLegacyAssetsFontRoboto_slabRobotoslabThinSvg,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.ttf": DistLegacyAssetsFontRoboto_slabRobotoslabThinTtf,
	"../dist/legacy-assets/font/Roboto_Slab/RobotoSlab-Thin.woff": DistLegacyAssetsFontRoboto_slabRobotoslabThinWoff,
	"../dist/legacy-assets/font/Ubuntu_Mono/UFL.txt": DistLegacyAssetsFontUbuntu_monoUflTxt,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.eot": DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldEot,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.svg": DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldSvg,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.ttf": DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldTtf,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Bold.woff": DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldWoff,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.eot": DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicEot,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.svg": DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicSvg,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.ttf": DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicTtf,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-BoldItalic.woff": DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicWoff,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.eot": DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicEot,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.svg": DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicSvg,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.ttf": DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicTtf,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Italic.woff": DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicWoff,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.eot": DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularEot,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.svg": DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularSvg,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.ttf": DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularTtf,
	"../dist/legacy-assets/font/Ubuntu_Mono/UbuntuMono-Regular.woff": DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularWoff,
	"../dist/legacy-assets/font/florence.eot": DistLegacyAssetsFontFlorenceEot,
	"../dist/legacy-assets/font/florence.svg": DistLegacyAssetsFontFlorenceSvg,
	"../dist/legacy-assets/font/florence.ttf": DistLegacyAssetsFontFlorenceTtf,
	"../dist/legacy-assets/font/florence.woff": DistLegacyAssetsFontFlorenceWoff,
	"../dist/legacy-assets/img/flo-logo.png": DistLegacyAssetsImgFloLogoPng,
	"../dist/legacy-assets/img/rule-21.png": DistLegacyAssetsImgRule21Png,
	"../dist/legacy-assets/img/rule-22.png": DistLegacyAssetsImgRule22Png,
	"../dist/legacy-assets/img/rule.png": DistLegacyAssetsImgRulePng,
	"../dist/legacy-assets/img/sb_v_double_arrow.png": DistLegacyAssetsImgSb_v_double_arrowPng,
	"../dist/legacy-assets/img/semi-transparent-bg.png": DistLegacyAssetsImgSemiTransparentBgPng,
	"../dist/legacy-assets/img/sprite.png": DistLegacyAssetsImgSpritePng,
	"../dist/legacy-assets/img/ui-bg_diagonals-thick_18_b81900_40x40.png": DistLegacyAssetsImgUiBg_diagonalsThick_18_b81900_40x40Png,
	"../dist/legacy-assets/img/ui-bg_diagonals-thick_20_666666_40x40.png": DistLegacyAssetsImgUiBg_diagonalsThick_20_666666_40x40Png,
	"../dist/legacy-assets/img/ui-bg_flat_10_000000_40x100.png": DistLegacyAssetsImgUiBg_flat_10_000000_40x100Png,
	"../dist/legacy-assets/img/ui-bg_glass_100_f6f6f6_1x400.png": DistLegacyAssetsImgUiBg_glass_100_f6f6f6_1x400Png,
	"../dist/legacy-assets/img/ui-bg_glass_100_fdf5ce_1x400.png": DistLegacyAssetsImgUiBg_glass_100_fdf5ce_1x400Png,
	"../dist/legacy-assets/img/ui-bg_glass_65_ffffff_1x400.png": DistLegacyAssetsImgUiBg_glass_65_ffffff_1x400Png,
	"../dist/legacy-assets/img/ui-bg_gloss-wave_35_f6a828_500x100.png": DistLegacyAssetsImgUiBg_glossWave_35_f6a828_500x100Png,
	"../dist/legacy-assets/img/ui-bg_highlight-soft_100_eeeeee_1x100.png": DistLegacyAssetsImgUiBg_highlightSoft_100_eeeeee_1x100Png,
	"../dist/legacy-assets/img/ui-bg_highlight-soft_75_ffe45c_1x100.png": DistLegacyAssetsImgUiBg_highlightSoft_75_ffe45c_1x100Png,
	"../dist/legacy-assets/img/ui-icons_222222_256x240.png": DistLegacyAssetsImgUiIcons_222222_256x240Png,
	"../dist/legacy-assets/img/ui-icons_228ef1_256x240.png": DistLegacyAssetsImgUiIcons_228ef1_256x240Png,
	"../dist/legacy-assets/img/ui-icons_ef8c08_256x240.png": DistLegacyAssetsImgUiIcons_ef8c08_256x240Png,
	"../dist/legacy-assets/img/ui-icons_ffd27a_256x240.png": DistLegacyAssetsImgUiIcons_ffd27a_256x240Png,
	"../dist/legacy-assets/img/ui-icons_ffffff_256x240.png": DistLegacyAssetsImgUiIcons_ffffff_256x240Png,
	"../dist/legacy-assets/img/wmd-buttons.png": DistLegacyAssetsImgWmdButtonsPng,
	"../dist/legacy-assets/index.html": DistLegacyAssetsIndexHtml,
	"../dist/legacy-assets/js/classes/cookieUtils.js": DistLegacyAssetsJsClassesCookieutilsJs,
	"../dist/legacy-assets/js/classes/ermintrude.js": DistLegacyAssetsJsClassesErmintrudeJs,
	"../dist/legacy-assets/js/classes/pathUtils.js": DistLegacyAssetsJsClassesPathutilsJs,
	"../dist/legacy-assets/js/functions/__init.js": DistLegacyAssetsJsFunctions__initJs,
	"../dist/legacy-assets/js/functions/_checkDocuments.js": DistLegacyAssetsJsFunctions_checkdocumentsJs,
	"../dist/legacy-assets/js/functions/_checkForPageChanged.js": DistLegacyAssetsJsFunctions_checkforpagechangedJs,
	"../dist/legacy-assets/js/functions/_checkPathSlashes.js": DistLegacyAssetsJsFunctions_checkpathslashesJs,
	"../dist/legacy-assets/js/functions/_createWorkspace.js": DistLegacyAssetsJsFunctions_createworkspaceJs,
	"../dist/legacy-assets/js/functions/_getCollection.js": DistLegacyAssetsJsFunctions_getcollectionJs,
	"../dist/legacy-assets/js/functions/_getPathName.js": DistLegacyAssetsJsFunctions_getpathnameJs,
	"../dist/legacy-assets/js/functions/_getPathNameTrimLast.js": DistLegacyAssetsJsFunctions_getpathnametrimlastJs,
	"../dist/legacy-assets/js/functions/_handleApiError.js": DistLegacyAssetsJsFunctions_handleapierrorJs,
	"../dist/legacy-assets/js/functions/_hideBudHerd.js": DistLegacyAssetsJsFunctions_hidebudherdJs,
	"../dist/legacy-assets/js/functions/_logout.js": DistLegacyAssetsJsFunctions_logoutJs,
	"../dist/legacy-assets/js/functions/_postLogin.js": DistLegacyAssetsJsFunctions_postloginJs,
	"../dist/legacy-assets/js/functions/_postPassword.js": DistLegacyAssetsJsFunctions_postpasswordJs,
	"../dist/legacy-assets/js/functions/_refreshPreview.js": DistLegacyAssetsJsFunctions_refreshpreviewJs,
	"../dist/legacy-assets/js/functions/_setupErmintrude.js": DistLegacyAssetsJsFunctions_setupermintrudeJs,
	"../dist/legacy-assets/js/functions/_viewChangePassword.js": DistLegacyAssetsJsFunctions_viewchangepasswordJs,
	"../dist/legacy-assets/js/functions/_viewCollectionDetails.js": DistLegacyAssetsJsFunctions_viewcollectiondetailsJs,
	"../dist/legacy-assets/js/functions/_viewCollections.js": DistLegacyAssetsJsFunctions_viewcollectionsJs,
	"../dist/legacy-assets/js/functions/_viewController.js": DistLegacyAssetsJsFunctions_viewcontrollerJs,
	"../dist/legacy-assets/js/functions/_viewLogIn.js": DistLegacyAssetsJsFunctions_viewloginJs,
	"../dist/legacy-assets/js/jquery.min.js": DistLegacyAssetsJsJqueryMinJs,
	"../dist/legacy-assets/js/main.js": DistLegacyAssetsJsMainJs,
	"../dist/legacy-assets/js/templates.js": DistLegacyAssetsJsTemplatesJs,
	"../dist/legacy-assets/js/third-party/Markdown.Converter.js": DistLegacyAssetsJsThirdPartyMarkdownConverterJs,
	"../dist/legacy-assets/js/third-party/Markdown.Editor.js": DistLegacyAssetsJsThirdPartyMarkdownEditorJs,
	"../dist/legacy-assets/js/third-party/Markdown.Extra.js": DistLegacyAssetsJsThirdPartyMarkdownExtraJs,
	"../dist/legacy-assets/js/third-party/Markdown.Sanitizer.js": DistLegacyAssetsJsThirdPartyMarkdownSanitizerJs,
	"../dist/legacy-assets/js/third-party/MathJax.js": DistLegacyAssetsJsThirdPartyMathjaxJs,
	"../dist/legacy-assets/js/third-party/ZeroClipboard.min.js": DistLegacyAssetsJsThirdPartyZeroclipboardMinJs,
	"../dist/legacy-assets/js/third-party/ZeroClipboard.swf": DistLegacyAssetsJsThirdPartyZeroclipboardSwf,
	"../dist/legacy-assets/js/third-party/autosize.js": DistLegacyAssetsJsThirdPartyAutosizeJs,
	"../dist/legacy-assets/js/third-party/handlebars.runtime.min.js": DistLegacyAssetsJsThirdPartyHandlebarsRuntimeMinJs,
	"../dist/legacy-assets/js/third-party/highcharts-more.js": DistLegacyAssetsJsThirdPartyHighchartsMoreJs,
	"../dist/legacy-assets/js/third-party/highcharts.js": DistLegacyAssetsJsThirdPartyHighchartsJs,
	"../dist/legacy-assets/js/third-party/jquery-ui-timepicker-addon.js": DistLegacyAssetsJsThirdPartyJqueryUiTimepickerAddonJs,
	"../dist/legacy-assets/js/third-party/jquery-ui.js": DistLegacyAssetsJsThirdPartyJqueryUiJs,
	"../dist/legacy-assets/js/third-party/jquery.hotkeys.js": DistLegacyAssetsJsThirdPartyJqueryHotkeysJs,
	"../dist/legacy-assets/js/third-party/sweetalert.min.js": DistLegacyAssetsJsThirdPartySweetalertMinJs,
	"../dist/legacy-assets/js/third-party/tag-it.js": DistLegacyAssetsJsThirdPartyTagItJs,
	"../dist/legacy-assets/js/third-party/underscore-min.js": DistLegacyAssetsJsThirdPartyUnderscoreMinJs,
	"../dist/legacy-assets/js/third-party/underscore-min.map": DistLegacyAssetsJsThirdPartyUnderscoreMinMap,
	"../dist/legacy-assets/package-lock.json": DistLegacyAssetsPackageLockJson,
	"../dist/legacy-assets/package.json": DistLegacyAssetsPackageJson,
	"../dist/legacy-assets/scss/all.scss": DistLegacyAssetsScssAllScss,
	"../dist/legacy-assets/scss/main.scss": DistLegacyAssetsScssMainScss,
	"../dist/legacy-assets/scss/partials/_base.scss": DistLegacyAssetsScssPartials_baseScss,
	"../dist/legacy-assets/scss/partials/_collections.scss": DistLegacyAssetsScssPartials_collectionsScss,
	"../dist/legacy-assets/scss/partials/_colour-palette.scss": DistLegacyAssetsScssPartials_colourPaletteScss,
	"../dist/legacy-assets/scss/partials/_elements.scss": DistLegacyAssetsScssPartials_elementsScss,
	"../dist/legacy-assets/scss/partials/_fonts.scss": DistLegacyAssetsScssPartials_fontsScss,
	"../dist/legacy-assets/scss/partials/_grid.scss": DistLegacyAssetsScssPartials_gridScss,
	"../dist/legacy-assets/scss/partials/_jqui.scss": DistLegacyAssetsScssPartials_jquiScss,
	"../dist/legacy-assets/scss/partials/_publish.scss": DistLegacyAssetsScssPartials_publishScss,
	"../dist/legacy-assets/scss/partials/_reset.scss": DistLegacyAssetsScssPartials_resetScss,
	"../dist/legacy-assets/scss/partials/_shame.scss": DistLegacyAssetsScssPartials_shameScss,
	"../dist/legacy-assets/scss/partials/_typography copy.scss": DistLegacyAssetsScssPartials_typographyCopyScss,
	"../dist/legacy-assets/scss/partials/_typography.scss": DistLegacyAssetsScssPartials_typographyScss,
	"../dist/legacy-assets/scss/partials/_workspace.scss": DistLegacyAssetsScssPartials_workspaceScss,
	"../dist/legacy-assets/scss/pattern-library/README.md": DistLegacyAssetsScssPatternLibraryReadmeMd,
	"../dist/legacy-assets/scss/pattern-library/_colors.scss": DistLegacyAssetsScssPatternLibrary_colorsScss,
	"../dist/legacy-assets/scss/pattern-library/_settings.scss": DistLegacyAssetsScssPatternLibrary_settingsScss,
	"../dist/legacy-assets/scss/pattern-library/core/README.md": DistLegacyAssetsScssPatternLibraryCoreReadmeMd,
	"../dist/legacy-assets/scss/pattern-library/core/_base.scss": DistLegacyAssetsScssPatternLibraryCore_baseScss,
	"../dist/legacy-assets/scss/pattern-library/core/_hiding.scss": DistLegacyAssetsScssPatternLibraryCore_hidingScss,
	"../dist/legacy-assets/scss/pattern-library/core/_mixins.scss": DistLegacyAssetsScssPatternLibraryCore_mixinsScss,
	"../dist/legacy-assets/scss/pattern-library/core/_print.scss": DistLegacyAssetsScssPatternLibraryCore_printScss,
	"../dist/legacy-assets/scss/pattern-library/core/_skiplinks.scss": DistLegacyAssetsScssPatternLibraryCore_skiplinksScss,
	"../dist/legacy-assets/scss/pattern-library/core/_utils.scss": DistLegacyAssetsScssPatternLibraryCore_utilsScss,
	"../dist/legacy-assets/scss/pattern-library/core/vendor/README.md": DistLegacyAssetsScssPatternLibraryCoreVendorReadmeMd,
	"../dist/legacy-assets/scss/pattern-library/core/vendor/grid/_proportional-grids.scss": DistLegacyAssetsScssPatternLibraryCoreVendorGrid_proportionalGridsScss,
	"../dist/legacy-assets/scss/pattern-library/core/vendor/normalize/README.md": DistLegacyAssetsScssPatternLibraryCoreVendorNormalizeReadmeMd,
	"../dist/legacy-assets/scss/pattern-library/core/vendor/normalize/_normalize-mod.scss": DistLegacyAssetsScssPatternLibraryCoreVendorNormalize_normalizeModScss,
	"../dist/legacy-assets/scss/pattern-library/core/vendor/normalize/_normalize.scss": DistLegacyAssetsScssPatternLibraryCoreVendorNormalize_normalizeScss,
	"../dist/legacy-assets/scss/pattern-library/lib/_tooltipster.scss": DistLegacyAssetsScssPatternLibraryLib_tooltipsterScss,
	"../dist/legacy-assets/scss/pattern-library/main.scss": DistLegacyAssetsScssPatternLibraryMainScss,
	"../dist/legacy-assets/scss/pattern-library/oldie.scss": DistLegacyAssetsScssPatternLibraryOldieScss,
	"../dist/legacy-assets/scss/pattern-library/project/README.md": DistLegacyAssetsScssPatternLibraryProjectReadmeMd,
	"../dist/legacy-assets/scss/pattern-library/project/_base.scss": DistLegacyAssetsScssPatternLibraryProject_baseScss,
	"../dist/legacy-assets/scss/pattern-library/project/_icons.scss": DistLegacyAssetsScssPatternLibraryProject_iconsScss,
	"../dist/legacy-assets/scss/pattern-library/project/_layout.scss": DistLegacyAssetsScssPatternLibraryProject_layoutScss,
	"../dist/legacy-assets/scss/pattern-library/project/_tooltips.scss": DistLegacyAssetsScssPatternLibraryProject_tooltipsScss,
	"../dist/legacy-assets/scss/pattern-library/project/_utilities.scss": DistLegacyAssetsScssPatternLibraryProject_utilitiesScss,
	"../dist/legacy-assets/scss/pattern-library/project/_wrapper.scss": DistLegacyAssetsScssPatternLibraryProject_wrapperScss,
	"../dist/legacy-assets/scss/pattern-library/project/components/_article-header.scss": DistLegacyAssetsScssPatternLibraryProjectComponents_articleHeaderScss,
	"../dist/legacy-assets/scss/pattern-library/project/components/_chart-area.scss": DistLegacyAssetsScssPatternLibraryProjectComponents_chartAreaScss,
	"../dist/legacy-assets/scss/pattern-library/project/components/_charts.scss": DistLegacyAssetsScssPatternLibraryProjectComponents_chartsScss,
	"../dist/legacy-assets/scss/pattern-library/project/components/_data-tables.scss": DistLegacyAssetsScssPatternLibraryProjectComponents_dataTablesScss,
	"../dist/legacy-assets/scss/pattern-library/project/components/_footnotes.scss": DistLegacyAssetsScssPatternLibraryProjectComponents_footnotesScss,
	"../dist/legacy-assets/scss/pattern-library/project/components/_global-footer.scss": DistLegacyAssetsScssPatternLibraryProjectComponents_globalFooterScss,
	"../dist/legacy-assets/scss/pattern-library/project/components/_global-header.scss": DistLegacyAssetsScssPatternLibraryProjectComponents_globalHeaderScss,
	"../dist/legacy-assets/scss/pattern-library/project/components/_hero-banner.scss": DistLegacyAssetsScssPatternLibraryProjectComponents_heroBannerScss,
	"../dist/legacy-assets/scss/pattern-library/project/components/_page-header.scss": DistLegacyAssetsScssPatternLibraryProjectComponents_pageHeaderScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_actionable-header.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_actionableHeaderScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_boxes.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_boxesScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_buttons.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_buttonsScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_content-image.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_contentImageScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_dates.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_datesScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_divider.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_dividerScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_hero.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_heroScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_link-complex.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_linkComplexScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_list-table.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_listTableScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_lozenges.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_lozengesScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_media.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_mediaScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_nav-panels.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_navPanelsScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_navs-primary.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_navsPrimaryScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_navs.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_navsScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_panels.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_panelsScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_slates.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_slatesScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_split.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_splitScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_stat-callout.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_statCalloutScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_stats.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_statsScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_supporting-content.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_supportingContentScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_table-of-contents.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_tableOfContentsScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_tables.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_tablesScss,
	"../dist/legacy-assets/scss/pattern-library/project/patterns/_tabs.scss": DistLegacyAssetsScssPatternLibraryProjectPatterns_tabsScss,
	"../dist/legacy-assets/scss/pattern-library/project/ui-patterns/_forms.scss": DistLegacyAssetsScssPatternLibraryProjectUiPatterns_formsScss,
	"../dist/legacy-assets/scss/pattern-library/project/vendor/README.md": DistLegacyAssetsScssPatternLibraryProjectVendorReadmeMd,
	"../dist/legacy-assets/scss/pattern-library/project/visual-language/_colors.scss": DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_colorsScss,
	"../dist/legacy-assets/scss/pattern-library/project/visual-language/_fonts.scss": DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_fontsScss,
	"../dist/legacy-assets/scss/pattern-library/project/visual-language/_grid.scss": DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_gridScss,
	"../dist/legacy-assets/scss/pattern-library/project/visual-language/_lists.scss": DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_listsScss,
	"../dist/legacy-assets/scss/pattern-library/project/visual-language/_type.scss": DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_typeScss,
	"../dist/legacy-assets/scss/style.scss": DistLegacyAssetsScssStyleScss,
	"../dist/legacy-assets/scss/third-party/epiceditor/images/edit.png": DistLegacyAssetsScssThirdPartyEpiceditorImagesEditPng,
	"../dist/legacy-assets/scss/third-party/epiceditor/images/fullscreen.png": DistLegacyAssetsScssThirdPartyEpiceditorImagesFullscreenPng,
	"../dist/legacy-assets/scss/third-party/epiceditor/images/preview.png": DistLegacyAssetsScssThirdPartyEpiceditorImagesPreviewPng,
	"../dist/legacy-assets/templates/browseNode.handlebars": DistLegacyAssetsTemplatesBrowsenodeHandlebars,
	"../dist/legacy-assets/templates/changePassword.handlebars": DistLegacyAssetsTemplatesChangepasswordHandlebars,
	"../dist/legacy-assets/templates/collectionDetails.handlebars": DistLegacyAssetsTemplatesCollectiondetailsHandlebars,
	"../dist/legacy-assets/templates/collectionList.handlebars": DistLegacyAssetsTemplatesCollectionlistHandlebars,
	"../dist/legacy-assets/templates/ermintrude.handlebars": DistLegacyAssetsTemplatesErmintrudeHandlebars,
	"../dist/legacy-assets/templates/login.handlebars": DistLegacyAssetsTemplatesLoginHandlebars,
	"../dist/legacy-assets/templates/mainNav.handlebars": DistLegacyAssetsTemplatesMainnavHandlebars,
	"../dist/legacy-assets/templates/mainNavSelect.handlebars": DistLegacyAssetsTemplatesMainnavselectHandlebars,
	"../dist/legacy-assets/templates/userDetails.handlebars": DistLegacyAssetsTemplatesUserdetailsHandlebars,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"dist": &bintree{nil, map[string]*bintree{
			"legacy-assets": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"florence.css": &bintree{DistLegacyAssetsCssFlorenceCss, map[string]*bintree{}},
					"main.min.css": &bintree{DistLegacyAssetsCssMainMinCss, map[string]*bintree{}},
					"main.min.css.map": &bintree{DistLegacyAssetsCssMainMinCssMap, map[string]*bintree{}},
					"rapid-prototype-main.css": &bintree{DistLegacyAssetsCssRapidPrototypeMainCss, map[string]*bintree{}},
					"style.min.css": &bintree{DistLegacyAssetsCssStyleMinCss, map[string]*bintree{}},
					"third-party": &bintree{nil, map[string]*bintree{
						"c3.css": &bintree{DistLegacyAssetsCssThirdPartyC3Css, map[string]*bintree{}},
						"jquery-ui.theme.min.css": &bintree{DistLegacyAssetsCssThirdPartyJqueryUiThemeMinCss, map[string]*bintree{}},
						"jquery.tagit.css": &bintree{DistLegacyAssetsCssThirdPartyJqueryTagitCss, map[string]*bintree{}},
						"pagedown.css": &bintree{DistLegacyAssetsCssThirdPartyPagedownCss, map[string]*bintree{}},
						"responsive-tables.css": &bintree{DistLegacyAssetsCssThirdPartyResponsiveTablesCss, map[string]*bintree{}},
						"sweetalert.css": &bintree{DistLegacyAssetsCssThirdPartySweetalertCss, map[string]*bintree{}},
						"tagit.ui-zendesk.css": &bintree{DistLegacyAssetsCssThirdPartyTagitUiZendeskCss, map[string]*bintree{}},
					}},
				}},
				"font": &bintree{nil, map[string]*bintree{
					"Open_Sans": &bintree{nil, map[string]*bintree{
						"LICENSE.txt": &bintree{DistLegacyAssetsFontOpen_sansLicenseTxt, map[string]*bintree{}},
						"OpenSans-Bold.eot": &bintree{DistLegacyAssetsFontOpen_sansOpensansBoldEot, map[string]*bintree{}},
						"OpenSans-Bold.svg": &bintree{DistLegacyAssetsFontOpen_sansOpensansBoldSvg, map[string]*bintree{}},
						"OpenSans-Bold.ttf": &bintree{DistLegacyAssetsFontOpen_sansOpensansBoldTtf, map[string]*bintree{}},
						"OpenSans-Bold.woff": &bintree{DistLegacyAssetsFontOpen_sansOpensansBoldWoff, map[string]*bintree{}},
						"OpenSans-BoldItalic.eot": &bintree{DistLegacyAssetsFontOpen_sansOpensansBolditalicEot, map[string]*bintree{}},
						"OpenSans-BoldItalic.svg": &bintree{DistLegacyAssetsFontOpen_sansOpensansBolditalicSvg, map[string]*bintree{}},
						"OpenSans-BoldItalic.ttf": &bintree{DistLegacyAssetsFontOpen_sansOpensansBolditalicTtf, map[string]*bintree{}},
						"OpenSans-BoldItalic.woff": &bintree{DistLegacyAssetsFontOpen_sansOpensansBolditalicWoff, map[string]*bintree{}},
						"OpenSans-ExtraBold.eot": &bintree{DistLegacyAssetsFontOpen_sansOpensansExtraboldEot, map[string]*bintree{}},
						"OpenSans-ExtraBold.svg": &bintree{DistLegacyAssetsFontOpen_sansOpensansExtraboldSvg, map[string]*bintree{}},
						"OpenSans-ExtraBold.ttf": &bintree{DistLegacyAssetsFontOpen_sansOpensansExtraboldTtf, map[string]*bintree{}},
						"OpenSans-ExtraBold.woff": &bintree{DistLegacyAssetsFontOpen_sansOpensansExtraboldWoff, map[string]*bintree{}},
						"OpenSans-ExtraBoldItalic.eot": &bintree{DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicEot, map[string]*bintree{}},
						"OpenSans-ExtraBoldItalic.svg": &bintree{DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicSvg, map[string]*bintree{}},
						"OpenSans-ExtraBoldItalic.ttf": &bintree{DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicTtf, map[string]*bintree{}},
						"OpenSans-ExtraBoldItalic.woff": &bintree{DistLegacyAssetsFontOpen_sansOpensansExtrabolditalicWoff, map[string]*bintree{}},
						"OpenSans-Italic.eot": &bintree{DistLegacyAssetsFontOpen_sansOpensansItalicEot, map[string]*bintree{}},
						"OpenSans-Italic.svg": &bintree{DistLegacyAssetsFontOpen_sansOpensansItalicSvg, map[string]*bintree{}},
						"OpenSans-Italic.ttf": &bintree{DistLegacyAssetsFontOpen_sansOpensansItalicTtf, map[string]*bintree{}},
						"OpenSans-Italic.woff": &bintree{DistLegacyAssetsFontOpen_sansOpensansItalicWoff, map[string]*bintree{}},
						"OpenSans-Light.eot": &bintree{DistLegacyAssetsFontOpen_sansOpensansLightEot, map[string]*bintree{}},
						"OpenSans-Light.svg": &bintree{DistLegacyAssetsFontOpen_sansOpensansLightSvg, map[string]*bintree{}},
						"OpenSans-Light.ttf": &bintree{DistLegacyAssetsFontOpen_sansOpensansLightTtf, map[string]*bintree{}},
						"OpenSans-Light.woff": &bintree{DistLegacyAssetsFontOpen_sansOpensansLightWoff, map[string]*bintree{}},
						"OpenSans-LightItalic.eot": &bintree{DistLegacyAssetsFontOpen_sansOpensansLightitalicEot, map[string]*bintree{}},
						"OpenSans-LightItalic.svg": &bintree{DistLegacyAssetsFontOpen_sansOpensansLightitalicSvg, map[string]*bintree{}},
						"OpenSans-LightItalic.ttf": &bintree{DistLegacyAssetsFontOpen_sansOpensansLightitalicTtf, map[string]*bintree{}},
						"OpenSans-LightItalic.woff": &bintree{DistLegacyAssetsFontOpen_sansOpensansLightitalicWoff, map[string]*bintree{}},
						"OpenSans-Regular.eot": &bintree{DistLegacyAssetsFontOpen_sansOpensansRegularEot, map[string]*bintree{}},
						"OpenSans-Regular.svg": &bintree{DistLegacyAssetsFontOpen_sansOpensansRegularSvg, map[string]*bintree{}},
						"OpenSans-Regular.ttf": &bintree{DistLegacyAssetsFontOpen_sansOpensansRegularTtf, map[string]*bintree{}},
						"OpenSans-Regular.woff": &bintree{DistLegacyAssetsFontOpen_sansOpensansRegularWoff, map[string]*bintree{}},
						"OpenSans-Semibold.eot": &bintree{DistLegacyAssetsFontOpen_sansOpensansSemiboldEot, map[string]*bintree{}},
						"OpenSans-Semibold.svg": &bintree{DistLegacyAssetsFontOpen_sansOpensansSemiboldSvg, map[string]*bintree{}},
						"OpenSans-Semibold.ttf": &bintree{DistLegacyAssetsFontOpen_sansOpensansSemiboldTtf, map[string]*bintree{}},
						"OpenSans-Semibold.woff": &bintree{DistLegacyAssetsFontOpen_sansOpensansSemiboldWoff, map[string]*bintree{}},
						"OpenSans-SemiboldItalic.eot": &bintree{DistLegacyAssetsFontOpen_sansOpensansSemibolditalicEot, map[string]*bintree{}},
						"OpenSans-SemiboldItalic.svg": &bintree{DistLegacyAssetsFontOpen_sansOpensansSemibolditalicSvg, map[string]*bintree{}},
						"OpenSans-SemiboldItalic.ttf": &bintree{DistLegacyAssetsFontOpen_sansOpensansSemibolditalicTtf, map[string]*bintree{}},
						"OpenSans-SemiboldItalic.woff": &bintree{DistLegacyAssetsFontOpen_sansOpensansSemibolditalicWoff, map[string]*bintree{}},
					}},
					"Roboto_Slab": &bintree{nil, map[string]*bintree{
						"LICENSE.txt": &bintree{DistLegacyAssetsFontRoboto_slabLicenseTxt, map[string]*bintree{}},
						"RobotoSlab-Bold.eot": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabBoldEot, map[string]*bintree{}},
						"RobotoSlab-Bold.svg": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabBoldSvg, map[string]*bintree{}},
						"RobotoSlab-Bold.ttf": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabBoldTtf, map[string]*bintree{}},
						"RobotoSlab-Bold.woff": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabBoldWoff, map[string]*bintree{}},
						"RobotoSlab-Light.eot": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabLightEot, map[string]*bintree{}},
						"RobotoSlab-Light.svg": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabLightSvg, map[string]*bintree{}},
						"RobotoSlab-Light.ttf": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabLightTtf, map[string]*bintree{}},
						"RobotoSlab-Light.woff": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabLightWoff, map[string]*bintree{}},
						"RobotoSlab-Regular.eot": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabRegularEot, map[string]*bintree{}},
						"RobotoSlab-Regular.svg": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabRegularSvg, map[string]*bintree{}},
						"RobotoSlab-Regular.ttf": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabRegularTtf, map[string]*bintree{}},
						"RobotoSlab-Regular.woff": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabRegularWoff, map[string]*bintree{}},
						"RobotoSlab-Thin.eot": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabThinEot, map[string]*bintree{}},
						"RobotoSlab-Thin.svg": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabThinSvg, map[string]*bintree{}},
						"RobotoSlab-Thin.ttf": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabThinTtf, map[string]*bintree{}},
						"RobotoSlab-Thin.woff": &bintree{DistLegacyAssetsFontRoboto_slabRobotoslabThinWoff, map[string]*bintree{}},
					}},
					"Ubuntu_Mono": &bintree{nil, map[string]*bintree{
						"UFL.txt": &bintree{DistLegacyAssetsFontUbuntu_monoUflTxt, map[string]*bintree{}},
						"UbuntuMono-Bold.eot": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldEot, map[string]*bintree{}},
						"UbuntuMono-Bold.svg": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldSvg, map[string]*bintree{}},
						"UbuntuMono-Bold.ttf": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldTtf, map[string]*bintree{}},
						"UbuntuMono-Bold.woff": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoBoldWoff, map[string]*bintree{}},
						"UbuntuMono-BoldItalic.eot": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicEot, map[string]*bintree{}},
						"UbuntuMono-BoldItalic.svg": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicSvg, map[string]*bintree{}},
						"UbuntuMono-BoldItalic.ttf": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicTtf, map[string]*bintree{}},
						"UbuntuMono-BoldItalic.woff": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoBolditalicWoff, map[string]*bintree{}},
						"UbuntuMono-Italic.eot": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicEot, map[string]*bintree{}},
						"UbuntuMono-Italic.svg": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicSvg, map[string]*bintree{}},
						"UbuntuMono-Italic.ttf": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicTtf, map[string]*bintree{}},
						"UbuntuMono-Italic.woff": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoItalicWoff, map[string]*bintree{}},
						"UbuntuMono-Regular.eot": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularEot, map[string]*bintree{}},
						"UbuntuMono-Regular.svg": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularSvg, map[string]*bintree{}},
						"UbuntuMono-Regular.ttf": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularTtf, map[string]*bintree{}},
						"UbuntuMono-Regular.woff": &bintree{DistLegacyAssetsFontUbuntu_monoUbuntumonoRegularWoff, map[string]*bintree{}},
					}},
					"florence.eot": &bintree{DistLegacyAssetsFontFlorenceEot, map[string]*bintree{}},
					"florence.svg": &bintree{DistLegacyAssetsFontFlorenceSvg, map[string]*bintree{}},
					"florence.ttf": &bintree{DistLegacyAssetsFontFlorenceTtf, map[string]*bintree{}},
					"florence.woff": &bintree{DistLegacyAssetsFontFlorenceWoff, map[string]*bintree{}},
				}},
				"img": &bintree{nil, map[string]*bintree{
					"flo-logo.png": &bintree{DistLegacyAssetsImgFloLogoPng, map[string]*bintree{}},
					"rule-21.png": &bintree{DistLegacyAssetsImgRule21Png, map[string]*bintree{}},
					"rule-22.png": &bintree{DistLegacyAssetsImgRule22Png, map[string]*bintree{}},
					"rule.png": &bintree{DistLegacyAssetsImgRulePng, map[string]*bintree{}},
					"sb_v_double_arrow.png": &bintree{DistLegacyAssetsImgSb_v_double_arrowPng, map[string]*bintree{}},
					"semi-transparent-bg.png": &bintree{DistLegacyAssetsImgSemiTransparentBgPng, map[string]*bintree{}},
					"sprite.png": &bintree{DistLegacyAssetsImgSpritePng, map[string]*bintree{}},
					"ui-bg_diagonals-thick_18_b81900_40x40.png": &bintree{DistLegacyAssetsImgUiBg_diagonalsThick_18_b81900_40x40Png, map[string]*bintree{}},
					"ui-bg_diagonals-thick_20_666666_40x40.png": &bintree{DistLegacyAssetsImgUiBg_diagonalsThick_20_666666_40x40Png, map[string]*bintree{}},
					"ui-bg_flat_10_000000_40x100.png": &bintree{DistLegacyAssetsImgUiBg_flat_10_000000_40x100Png, map[string]*bintree{}},
					"ui-bg_glass_100_f6f6f6_1x400.png": &bintree{DistLegacyAssetsImgUiBg_glass_100_f6f6f6_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_100_fdf5ce_1x400.png": &bintree{DistLegacyAssetsImgUiBg_glass_100_fdf5ce_1x400Png, map[string]*bintree{}},
					"ui-bg_glass_65_ffffff_1x400.png": &bintree{DistLegacyAssetsImgUiBg_glass_65_ffffff_1x400Png, map[string]*bintree{}},
					"ui-bg_gloss-wave_35_f6a828_500x100.png": &bintree{DistLegacyAssetsImgUiBg_glossWave_35_f6a828_500x100Png, map[string]*bintree{}},
					"ui-bg_highlight-soft_100_eeeeee_1x100.png": &bintree{DistLegacyAssetsImgUiBg_highlightSoft_100_eeeeee_1x100Png, map[string]*bintree{}},
					"ui-bg_highlight-soft_75_ffe45c_1x100.png": &bintree{DistLegacyAssetsImgUiBg_highlightSoft_75_ffe45c_1x100Png, map[string]*bintree{}},
					"ui-icons_222222_256x240.png": &bintree{DistLegacyAssetsImgUiIcons_222222_256x240Png, map[string]*bintree{}},
					"ui-icons_228ef1_256x240.png": &bintree{DistLegacyAssetsImgUiIcons_228ef1_256x240Png, map[string]*bintree{}},
					"ui-icons_ef8c08_256x240.png": &bintree{DistLegacyAssetsImgUiIcons_ef8c08_256x240Png, map[string]*bintree{}},
					"ui-icons_ffd27a_256x240.png": &bintree{DistLegacyAssetsImgUiIcons_ffd27a_256x240Png, map[string]*bintree{}},
					"ui-icons_ffffff_256x240.png": &bintree{DistLegacyAssetsImgUiIcons_ffffff_256x240Png, map[string]*bintree{}},
					"wmd-buttons.png": &bintree{DistLegacyAssetsImgWmdButtonsPng, map[string]*bintree{}},
				}},
				"index.html": &bintree{DistLegacyAssetsIndexHtml, map[string]*bintree{}},
				"js": &bintree{nil, map[string]*bintree{
					"classes": &bintree{nil, map[string]*bintree{
						"cookieUtils.js": &bintree{DistLegacyAssetsJsClassesCookieutilsJs, map[string]*bintree{}},
						"ermintrude.js": &bintree{DistLegacyAssetsJsClassesErmintrudeJs, map[string]*bintree{}},
						"pathUtils.js": &bintree{DistLegacyAssetsJsClassesPathutilsJs, map[string]*bintree{}},
					}},
					"functions": &bintree{nil, map[string]*bintree{
						"__init.js": &bintree{DistLegacyAssetsJsFunctions__initJs, map[string]*bintree{}},
						"_checkDocuments.js": &bintree{DistLegacyAssetsJsFunctions_checkdocumentsJs, map[string]*bintree{}},
						"_checkForPageChanged.js": &bintree{DistLegacyAssetsJsFunctions_checkforpagechangedJs, map[string]*bintree{}},
						"_checkPathSlashes.js": &bintree{DistLegacyAssetsJsFunctions_checkpathslashesJs, map[string]*bintree{}},
						"_createWorkspace.js": &bintree{DistLegacyAssetsJsFunctions_createworkspaceJs, map[string]*bintree{}},
						"_getCollection.js": &bintree{DistLegacyAssetsJsFunctions_getcollectionJs, map[string]*bintree{}},
						"_getPathName.js": &bintree{DistLegacyAssetsJsFunctions_getpathnameJs, map[string]*bintree{}},
						"_getPathNameTrimLast.js": &bintree{DistLegacyAssetsJsFunctions_getpathnametrimlastJs, map[string]*bintree{}},
						"_handleApiError.js": &bintree{DistLegacyAssetsJsFunctions_handleapierrorJs, map[string]*bintree{}},
						"_hideBudHerd.js": &bintree{DistLegacyAssetsJsFunctions_hidebudherdJs, map[string]*bintree{}},
						"_logout.js": &bintree{DistLegacyAssetsJsFunctions_logoutJs, map[string]*bintree{}},
						"_postLogin.js": &bintree{DistLegacyAssetsJsFunctions_postloginJs, map[string]*bintree{}},
						"_postPassword.js": &bintree{DistLegacyAssetsJsFunctions_postpasswordJs, map[string]*bintree{}},
						"_refreshPreview.js": &bintree{DistLegacyAssetsJsFunctions_refreshpreviewJs, map[string]*bintree{}},
						"_setupErmintrude.js": &bintree{DistLegacyAssetsJsFunctions_setupermintrudeJs, map[string]*bintree{}},
						"_viewChangePassword.js": &bintree{DistLegacyAssetsJsFunctions_viewchangepasswordJs, map[string]*bintree{}},
						"_viewCollectionDetails.js": &bintree{DistLegacyAssetsJsFunctions_viewcollectiondetailsJs, map[string]*bintree{}},
						"_viewCollections.js": &bintree{DistLegacyAssetsJsFunctions_viewcollectionsJs, map[string]*bintree{}},
						"_viewController.js": &bintree{DistLegacyAssetsJsFunctions_viewcontrollerJs, map[string]*bintree{}},
						"_viewLogIn.js": &bintree{DistLegacyAssetsJsFunctions_viewloginJs, map[string]*bintree{}},
					}},
					"jquery.min.js": &bintree{DistLegacyAssetsJsJqueryMinJs, map[string]*bintree{}},
					"main.js": &bintree{DistLegacyAssetsJsMainJs, map[string]*bintree{}},
					"templates.js": &bintree{DistLegacyAssetsJsTemplatesJs, map[string]*bintree{}},
					"third-party": &bintree{nil, map[string]*bintree{
						"Markdown.Converter.js": &bintree{DistLegacyAssetsJsThirdPartyMarkdownConverterJs, map[string]*bintree{}},
						"Markdown.Editor.js": &bintree{DistLegacyAssetsJsThirdPartyMarkdownEditorJs, map[string]*bintree{}},
						"Markdown.Extra.js": &bintree{DistLegacyAssetsJsThirdPartyMarkdownExtraJs, map[string]*bintree{}},
						"Markdown.Sanitizer.js": &bintree{DistLegacyAssetsJsThirdPartyMarkdownSanitizerJs, map[string]*bintree{}},
						"MathJax.js": &bintree{DistLegacyAssetsJsThirdPartyMathjaxJs, map[string]*bintree{}},
						"ZeroClipboard.min.js": &bintree{DistLegacyAssetsJsThirdPartyZeroclipboardMinJs, map[string]*bintree{}},
						"ZeroClipboard.swf": &bintree{DistLegacyAssetsJsThirdPartyZeroclipboardSwf, map[string]*bintree{}},
						"autosize.js": &bintree{DistLegacyAssetsJsThirdPartyAutosizeJs, map[string]*bintree{}},
						"handlebars.runtime.min.js": &bintree{DistLegacyAssetsJsThirdPartyHandlebarsRuntimeMinJs, map[string]*bintree{}},
						"highcharts-more.js": &bintree{DistLegacyAssetsJsThirdPartyHighchartsMoreJs, map[string]*bintree{}},
						"highcharts.js": &bintree{DistLegacyAssetsJsThirdPartyHighchartsJs, map[string]*bintree{}},
						"jquery-ui-timepicker-addon.js": &bintree{DistLegacyAssetsJsThirdPartyJqueryUiTimepickerAddonJs, map[string]*bintree{}},
						"jquery-ui.js": &bintree{DistLegacyAssetsJsThirdPartyJqueryUiJs, map[string]*bintree{}},
						"jquery.hotkeys.js": &bintree{DistLegacyAssetsJsThirdPartyJqueryHotkeysJs, map[string]*bintree{}},
						"sweetalert.min.js": &bintree{DistLegacyAssetsJsThirdPartySweetalertMinJs, map[string]*bintree{}},
						"tag-it.js": &bintree{DistLegacyAssetsJsThirdPartyTagItJs, map[string]*bintree{}},
						"underscore-min.js": &bintree{DistLegacyAssetsJsThirdPartyUnderscoreMinJs, map[string]*bintree{}},
						"underscore-min.map": &bintree{DistLegacyAssetsJsThirdPartyUnderscoreMinMap, map[string]*bintree{}},
					}},
				}},
				"package-lock.json": &bintree{DistLegacyAssetsPackageLockJson, map[string]*bintree{}},
				"package.json": &bintree{DistLegacyAssetsPackageJson, map[string]*bintree{}},
				"scss": &bintree{nil, map[string]*bintree{
					"all.scss": &bintree{DistLegacyAssetsScssAllScss, map[string]*bintree{}},
					"main.scss": &bintree{DistLegacyAssetsScssMainScss, map[string]*bintree{}},
					"partials": &bintree{nil, map[string]*bintree{
						"_base.scss": &bintree{DistLegacyAssetsScssPartials_baseScss, map[string]*bintree{}},
						"_collections.scss": &bintree{DistLegacyAssetsScssPartials_collectionsScss, map[string]*bintree{}},
						"_colour-palette.scss": &bintree{DistLegacyAssetsScssPartials_colourPaletteScss, map[string]*bintree{}},
						"_elements.scss": &bintree{DistLegacyAssetsScssPartials_elementsScss, map[string]*bintree{}},
						"_fonts.scss": &bintree{DistLegacyAssetsScssPartials_fontsScss, map[string]*bintree{}},
						"_grid.scss": &bintree{DistLegacyAssetsScssPartials_gridScss, map[string]*bintree{}},
						"_jqui.scss": &bintree{DistLegacyAssetsScssPartials_jquiScss, map[string]*bintree{}},
						"_publish.scss": &bintree{DistLegacyAssetsScssPartials_publishScss, map[string]*bintree{}},
						"_reset.scss": &bintree{DistLegacyAssetsScssPartials_resetScss, map[string]*bintree{}},
						"_shame.scss": &bintree{DistLegacyAssetsScssPartials_shameScss, map[string]*bintree{}},
						"_typography copy.scss": &bintree{DistLegacyAssetsScssPartials_typographyCopyScss, map[string]*bintree{}},
						"_typography.scss": &bintree{DistLegacyAssetsScssPartials_typographyScss, map[string]*bintree{}},
						"_workspace.scss": &bintree{DistLegacyAssetsScssPartials_workspaceScss, map[string]*bintree{}},
					}},
					"pattern-library": &bintree{nil, map[string]*bintree{
						"README.md": &bintree{DistLegacyAssetsScssPatternLibraryReadmeMd, map[string]*bintree{}},
						"_colors.scss": &bintree{DistLegacyAssetsScssPatternLibrary_colorsScss, map[string]*bintree{}},
						"_settings.scss": &bintree{DistLegacyAssetsScssPatternLibrary_settingsScss, map[string]*bintree{}},
						"core": &bintree{nil, map[string]*bintree{
							"README.md": &bintree{DistLegacyAssetsScssPatternLibraryCoreReadmeMd, map[string]*bintree{}},
							"_base.scss": &bintree{DistLegacyAssetsScssPatternLibraryCore_baseScss, map[string]*bintree{}},
							"_hiding.scss": &bintree{DistLegacyAssetsScssPatternLibraryCore_hidingScss, map[string]*bintree{}},
							"_mixins.scss": &bintree{DistLegacyAssetsScssPatternLibraryCore_mixinsScss, map[string]*bintree{}},
							"_print.scss": &bintree{DistLegacyAssetsScssPatternLibraryCore_printScss, map[string]*bintree{}},
							"_skiplinks.scss": &bintree{DistLegacyAssetsScssPatternLibraryCore_skiplinksScss, map[string]*bintree{}},
							"_utils.scss": &bintree{DistLegacyAssetsScssPatternLibraryCore_utilsScss, map[string]*bintree{}},
							"vendor": &bintree{nil, map[string]*bintree{
								"README.md": &bintree{DistLegacyAssetsScssPatternLibraryCoreVendorReadmeMd, map[string]*bintree{}},
								"grid": &bintree{nil, map[string]*bintree{
									"_proportional-grids.scss": &bintree{DistLegacyAssetsScssPatternLibraryCoreVendorGrid_proportionalGridsScss, map[string]*bintree{}},
								}},
								"normalize": &bintree{nil, map[string]*bintree{
									"README.md": &bintree{DistLegacyAssetsScssPatternLibraryCoreVendorNormalizeReadmeMd, map[string]*bintree{}},
									"_normalize-mod.scss": &bintree{DistLegacyAssetsScssPatternLibraryCoreVendorNormalize_normalizeModScss, map[string]*bintree{}},
									"_normalize.scss": &bintree{DistLegacyAssetsScssPatternLibraryCoreVendorNormalize_normalizeScss, map[string]*bintree{}},
								}},
							}},
						}},
						"lib": &bintree{nil, map[string]*bintree{
							"_tooltipster.scss": &bintree{DistLegacyAssetsScssPatternLibraryLib_tooltipsterScss, map[string]*bintree{}},
						}},
						"main.scss": &bintree{DistLegacyAssetsScssPatternLibraryMainScss, map[string]*bintree{}},
						"oldie.scss": &bintree{DistLegacyAssetsScssPatternLibraryOldieScss, map[string]*bintree{}},
						"project": &bintree{nil, map[string]*bintree{
							"README.md": &bintree{DistLegacyAssetsScssPatternLibraryProjectReadmeMd, map[string]*bintree{}},
							"_base.scss": &bintree{DistLegacyAssetsScssPatternLibraryProject_baseScss, map[string]*bintree{}},
							"_icons.scss": &bintree{DistLegacyAssetsScssPatternLibraryProject_iconsScss, map[string]*bintree{}},
							"_layout.scss": &bintree{DistLegacyAssetsScssPatternLibraryProject_layoutScss, map[string]*bintree{}},
							"_tooltips.scss": &bintree{DistLegacyAssetsScssPatternLibraryProject_tooltipsScss, map[string]*bintree{}},
							"_utilities.scss": &bintree{DistLegacyAssetsScssPatternLibraryProject_utilitiesScss, map[string]*bintree{}},
							"_wrapper.scss": &bintree{DistLegacyAssetsScssPatternLibraryProject_wrapperScss, map[string]*bintree{}},
							"components": &bintree{nil, map[string]*bintree{
								"_article-header.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectComponents_articleHeaderScss, map[string]*bintree{}},
								"_chart-area.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectComponents_chartAreaScss, map[string]*bintree{}},
								"_charts.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectComponents_chartsScss, map[string]*bintree{}},
								"_data-tables.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectComponents_dataTablesScss, map[string]*bintree{}},
								"_footnotes.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectComponents_footnotesScss, map[string]*bintree{}},
								"_global-footer.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectComponents_globalFooterScss, map[string]*bintree{}},
								"_global-header.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectComponents_globalHeaderScss, map[string]*bintree{}},
								"_hero-banner.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectComponents_heroBannerScss, map[string]*bintree{}},
								"_page-header.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectComponents_pageHeaderScss, map[string]*bintree{}},
							}},
							"patterns": &bintree{nil, map[string]*bintree{
								"_actionable-header.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_actionableHeaderScss, map[string]*bintree{}},
								"_boxes.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_boxesScss, map[string]*bintree{}},
								"_buttons.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_buttonsScss, map[string]*bintree{}},
								"_content-image.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_contentImageScss, map[string]*bintree{}},
								"_dates.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_datesScss, map[string]*bintree{}},
								"_divider.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_dividerScss, map[string]*bintree{}},
								"_hero.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_heroScss, map[string]*bintree{}},
								"_link-complex.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_linkComplexScss, map[string]*bintree{}},
								"_list-table.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_listTableScss, map[string]*bintree{}},
								"_lozenges.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_lozengesScss, map[string]*bintree{}},
								"_media.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_mediaScss, map[string]*bintree{}},
								"_nav-panels.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_navPanelsScss, map[string]*bintree{}},
								"_navs-primary.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_navsPrimaryScss, map[string]*bintree{}},
								"_navs.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_navsScss, map[string]*bintree{}},
								"_panels.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_panelsScss, map[string]*bintree{}},
								"_slates.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_slatesScss, map[string]*bintree{}},
								"_split.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_splitScss, map[string]*bintree{}},
								"_stat-callout.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_statCalloutScss, map[string]*bintree{}},
								"_stats.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_statsScss, map[string]*bintree{}},
								"_supporting-content.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_supportingContentScss, map[string]*bintree{}},
								"_table-of-contents.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_tableOfContentsScss, map[string]*bintree{}},
								"_tables.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_tablesScss, map[string]*bintree{}},
								"_tabs.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectPatterns_tabsScss, map[string]*bintree{}},
							}},
							"ui-patterns": &bintree{nil, map[string]*bintree{
								"_forms.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectUiPatterns_formsScss, map[string]*bintree{}},
							}},
							"vendor": &bintree{nil, map[string]*bintree{
								"README.md": &bintree{DistLegacyAssetsScssPatternLibraryProjectVendorReadmeMd, map[string]*bintree{}},
							}},
							"visual-language": &bintree{nil, map[string]*bintree{
								"_colors.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_colorsScss, map[string]*bintree{}},
								"_fonts.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_fontsScss, map[string]*bintree{}},
								"_grid.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_gridScss, map[string]*bintree{}},
								"_lists.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_listsScss, map[string]*bintree{}},
								"_type.scss": &bintree{DistLegacyAssetsScssPatternLibraryProjectVisualLanguage_typeScss, map[string]*bintree{}},
							}},
						}},
					}},
					"style.scss": &bintree{DistLegacyAssetsScssStyleScss, map[string]*bintree{}},
					"third-party": &bintree{nil, map[string]*bintree{
						"epiceditor": &bintree{nil, map[string]*bintree{
							"images": &bintree{nil, map[string]*bintree{
								"edit.png": &bintree{DistLegacyAssetsScssThirdPartyEpiceditorImagesEditPng, map[string]*bintree{}},
								"fullscreen.png": &bintree{DistLegacyAssetsScssThirdPartyEpiceditorImagesFullscreenPng, map[string]*bintree{}},
								"preview.png": &bintree{DistLegacyAssetsScssThirdPartyEpiceditorImagesPreviewPng, map[string]*bintree{}},
							}},
						}},
					}},
				}},
				"templates": &bintree{nil, map[string]*bintree{
					"browseNode.handlebars": &bintree{DistLegacyAssetsTemplatesBrowsenodeHandlebars, map[string]*bintree{}},
					"changePassword.handlebars": &bintree{DistLegacyAssetsTemplatesChangepasswordHandlebars, map[string]*bintree{}},
					"collectionDetails.handlebars": &bintree{DistLegacyAssetsTemplatesCollectiondetailsHandlebars, map[string]*bintree{}},
					"collectionList.handlebars": &bintree{DistLegacyAssetsTemplatesCollectionlistHandlebars, map[string]*bintree{}},
					"ermintrude.handlebars": &bintree{DistLegacyAssetsTemplatesErmintrudeHandlebars, map[string]*bintree{}},
					"login.handlebars": &bintree{DistLegacyAssetsTemplatesLoginHandlebars, map[string]*bintree{}},
					"mainNav.handlebars": &bintree{DistLegacyAssetsTemplatesMainnavHandlebars, map[string]*bintree{}},
					"mainNavSelect.handlebars": &bintree{DistLegacyAssetsTemplatesMainnavselectHandlebars, map[string]*bintree{}},
					"userDetails.handlebars": &bintree{DistLegacyAssetsTemplatesUserdetailsHandlebars, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

